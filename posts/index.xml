<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>All Posts - 菜菜的秘密花园</title>
        <link>https://imcaicai.github.io/posts/</link>
        <description>All Posts | 菜菜的秘密花园</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sun, 21 May 2023 13:03:16 &#43;0800</lastBuildDate><atom:link href="https://imcaicai.github.io/posts/" rel="self" type="application/rss+xml" /><item>
    <title>【CSP】202104题解</title>
    <link>https://imcaicai.github.io/csp202104/</link>
    <pubDate>Sun, 21 May 2023 13:03:16 &#43;0800</pubDate>
    <author>菜菜</author>
    <guid>https://imcaicai.github.io/csp202104/</guid>
    <description><![CDATA[1 灰度直方图 🔗 题目：灰度直方图
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  #include&lt;bits/stdc++.h&gt;using namespace std; int main(){ int n,m,l,a,h[300]={0}; scanf(&#34;%d %d %d&#34;,&amp;n,&amp;m,&amp;l); for(int i=0;i&lt;n;i++){ for(int j=0;j&lt;m;j++){ scanf(&#34;%d&#34;,&amp;a); h[a]++; } } for(int i=0;i&lt;l;i++) printf(&#34;%d &#34;,h[i]); return 0; }   ]]></description>
</item>
<item>
    <title>【CSP】202012题解</title>
    <link>https://imcaicai.github.io/csp202012/</link>
    <pubDate>Sun, 21 May 2023 12:07:03 &#43;0800</pubDate>
    <author>菜菜</author>
    <guid>https://imcaicai.github.io/csp202012/</guid>
    <description><![CDATA[1 期末预测之安全指数 🔗 题目：期末预测之安全指数
1 2 3 4 5 6 7 8 9 10 11 12 13 14  #include&lt;bits/stdc++.h&gt;using namespace std; int main(){ int n,w,s,y=0; scanf(&#34;%d&#34;,&amp;n); for(int i=0;i&lt;n;i++){ scanf(&#34;%d %d&#34;,&amp;w,&amp;s); y += w*s; } if(y&gt;0)	cout&lt;&lt;y; else cout&lt;&lt;0; return 0; }   2 期末预测之最佳阈值 🔗 题目：期末预测之最佳阈值
用 set 和 map 会方便很多。要找递推关系！！！
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  #include&lt;bits/stdc++.]]></description>
</item>
<item>
    <title>【CSP】202109题解</title>
    <link>https://imcaicai.github.io/csp202109/</link>
    <pubDate>Sun, 21 May 2023 11:15:52 &#43;0800</pubDate>
    <author>菜菜</author>
    <guid>https://imcaicai.github.io/csp202109/</guid>
    <description><![CDATA[1 数组推导 🔗 题目：数组推导
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  #include&lt;bits/stdc++.h&gt;using namespace std; int main(){ int n,s1=0,s2=0,b[105]={0}; scanf(&#34;%d&#34;,&amp;n); for(int i=1;i&lt;=n;i++) scanf(&#34;%d&#34;,&amp;b[i]); for(int i=n;i&gt;=1;i--){ s1+=b[i]; if(b[i]&gt;b[i-1])	s2+=b[i];	// a[i]=b[i] 	} cout&lt;&lt;s1&lt;&lt;endl&lt;&lt;s2&lt;&lt;endl; return 0; }   2 非零段划分 🔗 题目：非零段划分
🔴 这个题目刚看上去有点难，需要找前后的递推关系。倒序遍历 a[n]，来确定 p 的值。用 set 和 map 会方便很多。
🔵 set 的倒序遍历：
1 2  set&lt;int&gt;::reverse_iterator rit; for (rit=s.rbegin();rit!=s.rend();rit++){.....}   完整代码：]]></description>
</item>
<item>
    <title>【STL】bitset容器用法</title>
    <link>https://imcaicai.github.io/stlbitset%E5%AE%B9%E5%99%A8%E7%94%A8%E6%B3%95/</link>
    <pubDate>Thu, 18 May 2023 20:14:45 &#43;0800</pubDate>
    <author>菜菜</author>
    <guid>https://imcaicai.github.io/stlbitset%E5%AE%B9%E5%99%A8%E7%94%A8%E6%B3%95/</guid>
    <description><![CDATA[1 简介 🟠 由若干个位（bit）组成，它提供一些成员函数，使程序员不必通过位运算就能很方便地访问、修改其中的任意一位。
2 创建 1️⃣ 调用默认构造函数。
1  bitset&lt;N&gt; b;   3 常用的成员方法    成员方法 功能     count() 返回bitset中 1 的个数。   size() 返回位数。   test() 返回某一位下标是否为1   set() 全部置1,或者某一位置1或0   flip() 全部取反,或者某一位取反    ]]></description>
</item>
<item>
    <title>【CSP】刷题汇总</title>
    <link>https://imcaicai.github.io/csp%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/</link>
    <pubDate>Thu, 18 May 2023 20:12:04 &#43;0800</pubDate>
    <author>菜菜</author>
    <guid>https://imcaicai.github.io/csp%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/</guid>
    <description><![CDATA[🔗 202303    题号 时间/min 正确率 备注     1 20 100    2 30 100    3 40 0 🔸 bitset、map、set用法🔸 堆栈    🔗 202212    题号 时间/min 正确率 备注     1 10 100    2 45 100 🔸 fill函数   3 65 100 🔸 蛇形填充：规模较小时，可用一个矩阵专门写出下标🔸 cos函数    🔗 202209    题号 时间/min 正确率 备注     1 10 100    2 40 100 🔸 动态规划：01背包问题   3       🔗 202206    题号 时间/min 正确率 备注     1 10 100    2 30 100 🔸 题目给的一串数字不一定是顺序的，不要想当然！   3 120 100 🔸 cin/cout 提速🔸 vector 查找元素较慢，可用 set    🔗 202203    题号 时间/min 正确率 备注     1 10 100    2 35 100    3       🔗 202112    题号 时间/min 正确率 备注     1 15 100    2 30 100    3 120 40 🔸 注意审题！bug调不出来最好重读一遍题目！🔸 计算多项式中x的系数：找递推关系🔸 模拟多项式除法    🔗 202109    题号 时间/min 正确率 备注     1 10 100    2 50 100 🔸 找前后递推关系🔸 set 的倒序遍历；map   3       🔗 202104    题号 时间/min 正确率 备注     1 10 100    2      3       🔗 202012    题号 时间/min 正确率 备注     1 5 100    2 40 100 🔸 找递推关系🔸 对不规则排列的数组，用 set 和 map 会快很多   3       🔗 202009    题号 时间/min 正确率 备注     1      2      3       ]]></description>
</item>
<item>
    <title>SWIRL: Selection of Workload-aware Indexes using Reinforcement Learning</title>
    <link>https://imcaicai.github.io/swirl/</link>
    <pubDate>Wed, 03 May 2023 19:09:22 &#43;0800</pubDate>
    <author>菜菜</author>
    <guid>https://imcaicai.github.io/swirl/</guid>
    <description><![CDATA[本文为论文 SWIRL: Selection of Workload-aware Indexes using Reinforcement Learning 的阅读笔记。
1 简介  🔴 我们提出了一种基于RL的索引选择方法，与最好的竞争者的性能相匹配。
🟡 我们的解决方案采用了一个复杂的工作负载模型，以推广到具有未见过的查询的工作负载，并依靠无效动作屏蔽来减少训练时间。
🔵 我们包括了基于RL的索引选择的首次调查和性能研究，并通过PostgreSQL上复杂的分析性数据库基准评估我们的方法。
  2 背景 2.1 索引选择问题 大的解决方案空间。 相关候选索引的数量取决于工作负载查询访问的属性数量、每个索引的最大属性数量。评估所有候选组合通常是不切实际的，因为它们的数量超过了属性的数量级。
索引交互。 一个索引的存在会影响其他索引的性能。因此，在索引选择的每个步骤中，必须要考虑到当前存在的索引，经常需要重新计算候选索引的收益。
量化索引影响。 漫长的创建和执行时间使得物理上创建索引并不可行。索引选择方法通常依赖于估计而不是实际测量。（假设索引）
2.2 问题定义 假设有 N 个查询，K 个属性，每个查询 n 的属性表示为 $q_n⊆{1,&hellip;,K},n=1,&hellip;,K$ 。 W为每个索引包含的属性个数（索引宽度），$m_i$ 为需要的存储空间。索引的选择由子集 $I^*⊆I$ 表示，其执行成本为 $c_n(I^*)$ ，出现频率为 $f_n$ 。总的工作负载成本为：
目标是确定 $I^*$ 使 $C(I^*)$ 最小，并且不超过给定预算 B。
2.3 强化学习 强化学习（RL）包括一组算法，用于解决决策问题。
这些问题的特点是，在给定状态 $s_t∈S$ ，反复允许一个代理执行行动 $a_t$ ，其中 $a_t∈A$ 。在执行了所选择的行动后，达到新的状态 $s_{t+1}$ ，重复该过程。为了向代理人提供关于行动是否选择得当的反馈，他们会收到反馈信号，即每次决策后的奖励 $r_t$ 。
问题是要找到一个最佳决策，它将状态映射为行动，涉及到以时间 t 为开始状态的未来长期报酬：]]></description>
</item>
<item>
    <title>Access Path Selection in Main-Memory Optimized Data Systems</title>
    <link>https://imcaicai.github.io/access-path-selection-in-main-memory-optimized-data-systems/</link>
    <pubDate>Mon, 01 May 2023 23:35:11 &#43;0800</pubDate>
    <author>菜菜</author>
    <guid>https://imcaicai.github.io/access-path-selection-in-main-memory-optimized-data-systems/</guid>
    <description><![CDATA[本文为论文 Access Path Selection in Main-Memory Optimized Data Systems: Should I Scan or Should I Probe? 的阅读笔记。
1 引言 🟥 我们提出了一个增强的访问路径成本模型，它可以捕捉到在支持访问共享的主内存优化的分析数据系统中的选择运算符的性能。
🟨 访问路径的选择是需要的；即使在快速扫描时，经过调整的二级索引也是有用的。
🟩 我们表明，除了【选择性】和【硬件特性】外，访问路径的选择还需要动态地考虑到【查询并发性】。
🟦 我们将访问路径选择整合到一个现代分析原型的优化器中，并表明即使访问路径选择现在是一个更复杂的操作，必须考虑到更多的信息，它仍然可以快速完成；并且可以在各种工作负载上进行。
🟪 使用该模型，我们展示了何时使用索引的决定是如何随着数据布局和硬件属性的变化而变化的。
2 访问路径选择 2.1 模型准备工作  索引的选择性： 指不重复的索引值和数据表的记录总数的比值，取值范围在 [0,1] 之间。
索引的选择性越高则查询效率越高，因为选择性高的索引可以让 MySQL 在查找时过滤掉更多的行。
 2.2 内存中共享扫描建模 🔴 扫描的数据移动。给定内存带宽 $BW_S$ ，顺序扫描数据的成本为： $TD_S = \frac {N·ts}{BW_s}$ 。
🟡 谓词评估。假设 p 是时钟周期，fp 是指令流水线的常数，则谓词评估 PE 的 CPU 为： $PE = 2 · fp · p · N$ 。]]></description>
</item>
<item>
    <title>智能数据存储与管理实验室-实习记录</title>
    <link>https://imcaicai.github.io/%E6%99%BA%E8%83%BD%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E4%B8%8E%E7%AE%A1%E7%90%86%E5%AE%9E%E9%AA%8C%E5%AE%A4-%E5%AE%9E%E4%B9%A0%E8%AE%B0%E5%BD%95/</link>
    <pubDate>Mon, 01 May 2023 23:34:08 &#43;0800</pubDate>
    <author>菜菜</author>
    <guid>https://imcaicai.github.io/%E6%99%BA%E8%83%BD%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E4%B8%8E%E7%AE%A1%E7%90%86%E5%AE%9E%E9%AA%8C%E5%AE%A4-%E5%AE%9E%E4%B9%A0%E8%AE%B0%E5%BD%95/</guid>
    <description><![CDATA[这里记录了在智能数据存储与管理实验室的实习经历。前部分是关于【深度学习】、【hash】的内容；后部分主要和【index】相关。
2022 2022.10 ⬜ 看论文： Vision GNN: An Image is Worth Graph of Nodes
🔗 阅读笔记
⬜ 参与论文修改： Supervised Hierarchical Online Hashing for Cross-modal Retrieval
PS：主要是帮学长找语法错误、可以改进的地方
 2022.11 ⬛ 看论文： Label Embedding Online Hashing for Cross-Modal Retrieval
🔗 阅读笔记
⬛ 参与论文修改： Supervised Hierarchical Online Hashing for Cross-modal Retrieval
 2022.12 🟫 参与论文修改： Supervised Hierarchical Online Hashing for Cross-modal Retrieval
 2023 2023.04 🟥 看论文： Magic mirror in my hand, which is the best in the land?]]></description>
</item>
<item>
    <title>【二叉搜索树】特性篇</title>
    <link>https://imcaicai.github.io/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%89%B9%E6%80%A7%E7%AF%87/</link>
    <pubDate>Thu, 27 Apr 2023 08:37:42 &#43;0800</pubDate>
    <author>菜菜</author>
    <guid>https://imcaicai.github.io/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%89%B9%E6%80%A7%E7%AF%87/</guid>
    <description><![CDATA[1 二叉搜索树BST  🔴 对于 BST 的每一个节点 node，左子树节点的值都比 node 的值要小，右子树节点的值都比 node 的值大。
🔵 对于 BST 的每一个节点 node，它的左侧子树和右侧子树都是 BST。
 二叉搜索树问题的核心是【利用中序位置】。 以下代码可以将 BST 中每个节点的值升序打印出来：
1 2 3 4 5 6 7  void traverse(TreeNode root) { if (root == null) return; traverse(root.left); // 中序遍历代码位置 	print(root.val); traverse(root.right); }   后面两道题都是基于这个性质实现的。
2 二叉搜索树中第K小的元素 题目 🔗力扣 230. 二叉搜索树中第K小的元素
给定一个二叉搜索树的根节点 root ，和一个整数 k ，请你设计一个算法查找其中第 k 个最小元素（从 1 开始计数）。
解析 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  class Solution { private: int count=0,k,ans; public: int kthSmallest(TreeNode* root, int k) { this-&gt;k = k; traverse(root); return ans; } void traverse(TreeNode* root){ if(root==nullptr) return; traverse(root-&gt;left); // 中序遍历位置，找到第k小的元素  count++; if(count == k){ ans = root-&gt;val;return; } traverse(root-&gt;right); } };   扩展 🔴 利用【BST 中序遍历就是升序排序结果】这个性质，寻找第 k 小的元素的时间复杂度是 O(N)。]]></description>
</item>
<item>
    <title>【二叉树】归并排序详解及应用</title>
    <link>https://imcaicai.github.io/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%E8%AF%A6%E8%A7%A3%E5%8F%8A%E5%BA%94%E7%94%A8/</link>
    <pubDate>Wed, 26 Apr 2023 17:16:19 &#43;0800</pubDate>
    <author>菜菜</author>
    <guid>https://imcaicai.github.io/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%E8%AF%A6%E8%A7%A3%E5%8F%8A%E5%BA%94%E7%94%A8/</guid>
    <description><![CDATA[1 算法思路 🔴 所有递归的算法，本质上都是在遍历一棵（递归）树，然后在节点（前中后序位置）上执行代码。
🔵 【归并排序】类似于【二叉树的后序遍历】，使用【分治算法】的思想。
🟡 递归的 sort 函数就是二叉树的遍历函数，而 merge 函数就是在每个节点上做 的事情
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  // 定义：排序 nums[lo..hi] void sort(int[] nums, int lo, int hi) { if (lo == hi) { return; } int mid = (lo + hi) / 2; // 利⽤定义，排序 nums[lo..mid] 	sort(nums, lo, mid); // 利⽤定义，排序 nums[mid+1..hi] 	sort(nums, mid + 1, hi); /****** 后序位置 ******/ // 此时两部分⼦数组已经被排好序 	// 合并两个有序数组，使 nums[lo.]]></description>
</item>
</channel>
</rss>
