<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>菜菜的秘密花园</title>
        <link>https://imcaicai.github.io/</link>
        <description>菜菜的秘密花园</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Wed, 23 Aug 2023 15:08:44 &#43;0800</lastBuildDate>
            <atom:link href="https://imcaicai.github.io/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>在Linux下创建shell脚本</title>
    <link>https://imcaicai.github.io/%E5%9C%A8linux%E4%B8%8B%E5%88%9B%E5%BB%BAshell%E8%84%9A%E6%9C%AC/</link>
    <pubDate>Wed, 23 Aug 2023 15:08:44 &#43;0800</pubDate>
    <author>菜菜</author>
    <guid>https://imcaicai.github.io/%E5%9C%A8linux%E4%B8%8B%E5%88%9B%E5%BB%BAshell%E8%84%9A%E6%9C%AC/</guid>
    <description><![CDATA[1 创建脚本文件
1  touch test.sh   2 编辑
1  vim test.sh   3 改变权限
1  chmod 700 test.sh   4 执行
1  ./test.sh   ]]></description>
</item>
<item>
    <title>Tmux基本用法</title>
    <link>https://imcaicai.github.io/tmux%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</link>
    <pubDate>Tue, 15 Aug 2023 14:16:17 &#43;0800</pubDate>
    <author>菜菜</author>
    <guid>https://imcaicai.github.io/tmux%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</guid>
    <description><![CDATA[1 Tmux简介 Tmux 可以让会话与窗口&quot;解绑&quot;：窗口关闭时，会话并不终止，而是继续运行，等到以后需要的时候，再让会话&quot;绑定&quot;其他窗口。
  它允许在单个窗口中，同时访问多个会话。这对于同时运行多个命令行程序很有用。 它可以让新窗口&quot;接入&quot;已经存在的会话。 它允许每个会话有多个连接窗口，因此可以多人实时共享会话。 它还支持窗口任意的垂直和水平拆分。   2 基本使用 1 安装
1 2  # Ubuntu 或 Debian $ sudo apt-get install tmux   2 新建会话
1  $ tmux new -s &lt;session-name&gt;   3 分离会话
在 Tmux 窗口中，按下Ctrl+b d或者输入tmux detach命令。
4 接入会话
1 2 3 4 5  # 使用会话编号 $ tmux attach -t 0 # 使用会话名称 $ tmux attach -t &lt;session-name&gt;   5 杀死会话]]></description>
</item>
<item>
    <title>cloudlab&#43;greenplum&#43;python3配置</title>
    <link>https://imcaicai.github.io/cloudlab-greenplum-python3%E9%85%8D%E7%BD%AE/</link>
    <pubDate>Mon, 26 Jun 2023 19:44:39 &#43;0800</pubDate>
    <author>菜菜</author>
    <guid>https://imcaicai.github.io/cloudlab-greenplum-python3%E9%85%8D%E7%BD%AE/</guid>
    <description><![CDATA[参照论文 SWIRL: Selection of Workload-aware Indexes using Reinforcement Learning 在cloudlab提供的服务器上配置代码所需环境，本地机器为 Windows。
1 本地ssh连接远程cloudlab服务器 登录cloudlab官网，注册并租一台服务器。（默认的时长为16小时，注意及时续期，不然服务器上的东西到期会被清理，一般每次续7天）
点击刚刚租好的服务器，打开终端，下面配置本地和远程服务器的ssh连接。
打开本地的.ssh目录（Windows一般是 C:\User\.ssh ），里面有个 id_rsa.pub 文件，用记事本的格式打开这个文件，并复制里面的所有内容，即ssh公钥。
接着在远程服务器终端，打开 .ssh目录，里面有个 authorized_keys 文件，将刚刚复制的公钥粘贴到 authorized_keys 里面（从文件内容最后开始粘贴）。
再打开vscode，进行远程连接（这里需要装一下远程资源管理器，就是remote development）。点击远程资源管理器的设置按钮，在配置文件中添加host、hostname、user。host可以自己随便取，hostname是远程服务器的ip地址，user是远程服务器的用户名。
接着就可以在列表看到新连接的服务器了，右键点击 “connect to host in current window”，没问题就连接成功了，可以直接使用。
2 在cloudlab上安装greenplum 和在本机上装一样，过程参照：ubuntu安装greenplum教程及踩坑记录
3 在cloudlab上安装python3环境 wget工具下载压缩包
1 2 3 4  $ wget https://www.python.org/ftp/python/3.7.9/Python-3.7.9.tgz $ tar -xzvf Python-3.7.9.tgz $ ls gpAdminLogs gpinitsystem_singlenode greenplum hostlist_singlenode Python-3.7.9 Python-3.7.9.tgz   进入解压后的python文件夹，安装python依赖库，并编译安装python
1 2 3 4 5 6 7 8 9 10 11  $ cd Python-3.]]></description>
</item>
<item>
    <title>ubuntu安装greenplum教程及踩坑记录</title>
    <link>https://imcaicai.github.io/ubuntu%E5%AE%89%E8%A3%85greenplum%E6%95%99%E7%A8%8B%E5%8F%8A%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</link>
    <pubDate>Wed, 31 May 2023 22:56:44 &#43;0800</pubDate>
    <author>菜菜</author>
    <guid>https://imcaicai.github.io/ubuntu%E5%AE%89%E8%A3%85greenplum%E6%95%99%E7%A8%8B%E5%8F%8A%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</guid>
    <description><![CDATA[1 版本说明 在撰写本文时，Greenplum 的 Ubuntu 版本是为 Ubuntu 的 18.04 和 16.04 LTS（长期支持）发行版构建的。注意最好用 18.04 版本的ubuntu。（一开始用20及以上的，会有一些奇奇怪怪的错误）
2 安装Greenplum 将 Greenplum PPA 存储库添加到 Ubuntu 系统：
1 2 3  sudo apt update sudo apt install software-properties-common sudo add-apt-repository ppa:greenplum/db   更新 Ubuntu 系统以从最近添加的存储库中检索信息：
1 2  sudo apt update sudo apt install greenplum-db-6   上述命令将自动在系统上安装 Greenplum 数据库软件和任何所需的依赖项，并将生成的软件放在 /opt 目录中，如下所示：
将 Greenplum 数据库软件加载到环境中。注意，应该根据安装的 Greenplum 数据库版本选择 Greenplum 软件目录的确切路径。例如，这里是 greenplum-db-6.24.3 ：
1 2 3  source /opt/greenplum-db-6.]]></description>
</item>
<item>
    <title>【CSP】202006题解</title>
    <link>https://imcaicai.github.io/csp202006/</link>
    <pubDate>Thu, 25 May 2023 19:09:17 &#43;0800</pubDate>
    <author>菜菜</author>
    <guid>https://imcaicai.github.io/csp202006/</guid>
    <description><![CDATA[1 线性分类器 🔗 题目：线性分类器
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47  #include&lt;bits/stdc++.h&gt;using namespace std; struct node{ int x,y; }; int main(){ int n,m,a,b,c,x,y,s; vector&lt;node&gt; v1,v2; char t; cin&gt;&gt;n&gt;&gt;m; for(int i=0;i&lt;n;i++){ cin&gt;&gt;x&gt;&gt;y&gt;&gt;t; if(t==&#39;A&#39;) v1.]]></description>
</item>
<item>
    <title>【CSP】202009题解</title>
    <link>https://imcaicai.github.io/csp202009/</link>
    <pubDate>Tue, 23 May 2023 16:16:26 &#43;0800</pubDate>
    <author>菜菜</author>
    <guid>https://imcaicai.github.io/csp202009/</guid>
    <description><![CDATA[1 称检测点查询 🔗 题目：称检测点查询
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  #include&lt;bits/stdc++.h&gt;using namespace std; int main(){	int n,x,y,a,b,d,ans[3][2]; scanf(&#34;%d %d %d&#34;,&amp;n,&amp;x,&amp;y); ans[0][0]=ans[1][0]=ans[2][0]=100000000; for(int i=1;i&lt;=n;i++){ scanf(&#34;%d %d&#34;,&amp;a,&amp;b); d=(x-a)*(x-a)+(y-b)*(y-b); if(d&gt;=ans[0][0]) continue; else if(d&gt;=ans[1][0]){ ans[0][0]=d,ans[0][1]=i; } else if(d&gt;=ans[2][0]){ ans[0][0]=ans[1][0],ans[0][1]=ans[1][1]; ans[1][0]=d,ans[1][1]=i; } else{ ans[0][0]=ans[1][0],ans[0][1]=ans[1][1]; ans[1][0]=ans[2][0],ans[1][1]=ans[2][1]; ans[2][0]=d,ans[2][1]=i; } } printf(&#34;%d\n%d\n%d&#34;,ans[2][1],ans[1][1],ans[0][1]); return 0; }   2 风险人群筛查 🔗 题目：风险人群筛查]]></description>
</item>
<item>
    <title>【CSP】202104题解</title>
    <link>https://imcaicai.github.io/csp202104/</link>
    <pubDate>Sun, 21 May 2023 13:03:16 &#43;0800</pubDate>
    <author>菜菜</author>
    <guid>https://imcaicai.github.io/csp202104/</guid>
    <description><![CDATA[1 灰度直方图 🔗 题目：灰度直方图
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  #include&lt;bits/stdc++.h&gt;using namespace std; int main(){ int n,m,l,a,h[300]={0}; scanf(&#34;%d %d %d&#34;,&amp;n,&amp;m,&amp;l); for(int i=0;i&lt;n;i++){ for(int j=0;j&lt;m;j++){ scanf(&#34;%d&#34;,&amp;a); h[a]++; } } for(int i=0;i&lt;l;i++) printf(&#34;%d &#34;,h[i]); return 0; }   2 邻域均值 🔗 题目：邻域均值
🔴 求矩阵中一个框内的元素和：用二维压缩数组
🔵 判断时注意整数除法会向下取整，不能用 if(sum/t&lt;=num) ，而应用 if(sum&lt;=t*num) 。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  #include&lt;bits/stdc++.]]></description>
</item>
<item>
    <title>【CSP】202012题解</title>
    <link>https://imcaicai.github.io/csp202012/</link>
    <pubDate>Sun, 21 May 2023 12:07:03 &#43;0800</pubDate>
    <author>菜菜</author>
    <guid>https://imcaicai.github.io/csp202012/</guid>
    <description><![CDATA[1 期末预测之安全指数 🔗 题目：期末预测之安全指数
1 2 3 4 5 6 7 8 9 10 11 12 13 14  #include&lt;bits/stdc++.h&gt;using namespace std; int main(){ int n,w,s,y=0; scanf(&#34;%d&#34;,&amp;n); for(int i=0;i&lt;n;i++){ scanf(&#34;%d %d&#34;,&amp;w,&amp;s); y += w*s; } if(y&gt;0)	cout&lt;&lt;y; else cout&lt;&lt;0; return 0; }   2 期末预测之最佳阈值 🔗 题目：期末预测之最佳阈值
用 set 和 map 会方便很多。要找递推关系！！！
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  #include&lt;bits/stdc++.]]></description>
</item>
<item>
    <title>【CSP】202109题解</title>
    <link>https://imcaicai.github.io/csp202109/</link>
    <pubDate>Sun, 21 May 2023 11:15:52 &#43;0800</pubDate>
    <author>菜菜</author>
    <guid>https://imcaicai.github.io/csp202109/</guid>
    <description><![CDATA[1 数组推导 🔗 题目：数组推导
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  #include&lt;bits/stdc++.h&gt;using namespace std; int main(){ int n,s1=0,s2=0,b[105]={0}; scanf(&#34;%d&#34;,&amp;n); for(int i=1;i&lt;=n;i++) scanf(&#34;%d&#34;,&amp;b[i]); for(int i=n;i&gt;=1;i--){ s1+=b[i]; if(b[i]&gt;b[i-1])	s2+=b[i];	// a[i]=b[i] 	} cout&lt;&lt;s1&lt;&lt;endl&lt;&lt;s2&lt;&lt;endl; return 0; }   2 非零段划分 🔗 题目：非零段划分
🔴 这个题目刚看上去有点难，需要找前后的递推关系。倒序遍历 a[n]，来确定 p 的值。用 set 和 map 会方便很多。
🔵 set 的倒序遍历：
1 2  set&lt;int&gt;::reverse_iterator rit; for (rit=s.rbegin();rit!=s.rend();rit++){.....}   完整代码：]]></description>
</item>
<item>
    <title>【STL】bitset容器用法</title>
    <link>https://imcaicai.github.io/stlbitset%E5%AE%B9%E5%99%A8%E7%94%A8%E6%B3%95/</link>
    <pubDate>Thu, 18 May 2023 20:14:45 &#43;0800</pubDate>
    <author>菜菜</author>
    <guid>https://imcaicai.github.io/stlbitset%E5%AE%B9%E5%99%A8%E7%94%A8%E6%B3%95/</guid>
    <description><![CDATA[1 简介 🟠 由若干个位（bit）组成，它提供一些成员函数，使程序员不必通过位运算就能很方便地访问、修改其中的任意一位。
2 创建 1️⃣ 调用默认构造函数。
1  bitset&lt;N&gt; b;   3 常用的成员方法    成员方法 功能     count() 返回bitset中 1 的个数。   size() 返回位数。   test() 返回某一位下标是否为1   set() 全部置1,或者某一位置1或0   flip() 全部取反,或者某一位取反    ]]></description>
</item>
</channel>
</rss>
