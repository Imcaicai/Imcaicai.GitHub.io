<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>菜菜的秘密花园</title>
        <link>https://imcaicai.github.io/</link>
        <description>菜菜的秘密花园</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Mon, 20 Mar 2023 17:00:10 &#43;0800</lastBuildDate>
            <atom:link href="https://imcaicai.github.io/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>【蓝桥杯】2021题解(上)</title>
    <link>https://imcaicai.github.io/%E8%93%9D%E6%A1%A5%E6%9D%AF2021%E4%B8%8A/</link>
    <pubDate>Mon, 20 Mar 2023 17:00:10 &#43;0800</pubDate>
    <author>菜菜</author>
    <guid>https://imcaicai.github.io/%E8%93%9D%E6%A1%A5%E6%9D%AF2021%E4%B8%8A/</guid>
    <description><![CDATA[⏰总用时：	🎯正确率：
   题号 时间 得分 难度 备注     1 20 ❌ 🌕 🔸【计算一个整数各位上的数字】：当 i/10!=0 时，不断取出 i%10 。   2 3 ✅ 🌕    3 35 ❌ 🌕 🔸 二维数组太大容易引起报错：program received signal sigsegv, segmentation fault. （本题中用 int g[2022][2022]; 就报错了QAQ）   4 1 ✅ 🌕    5 20 ✅ 🌕 🔸 整数问题常用【取模】   6 40 ❌ 🌓    7 35 ✅ 🌓 🔸 【动态规划】考虑上一跳从哪来，而不是下一跳往哪去🔸 用数组 r[9]、c[9] 表示横纵坐标偏移的 9 种情况   8 15 ✅ 🌕 🔹 注意题目给的数据范围，应该用 long long，用 int 无法通过样例   9 25 ❌ 🌓    10 45 40 🌓     1 【填空】卡片 题目 小蓝有很多数字卡片，每张卡片上都是数字 0 到 9。小蓝准备用这些卡片来拼一些数，他想从 1 开始拼出正整数，每拼一个，就保存起来，卡片就不能用来拼其它数了。小蓝想知道自己能从 1 拼到多少。]]></description>
</item>
<item>
    <title>【STL】pair容器用法</title>
    <link>https://imcaicai.github.io/stlpair%E5%AE%B9%E5%99%A8%E7%94%A8%E6%B3%95/</link>
    <pubDate>Sat, 18 Mar 2023 19:24:15 &#43;0800</pubDate>
    <author>菜菜</author>
    <guid>https://imcaicai.github.io/stlpair%E5%AE%B9%E5%99%A8%E7%94%A8%E6%B3%95/</guid>
    <description><![CDATA[1 简介 🟠 pair 容器将 2 个普通元素 first 和 second（C++ 基本数据类型、结构体、类自定的类型等）创建成一个新元素&lt;first, second&gt;。
🔵 使用需加上头文件：#include &lt;utility&gt;
2 创建map容器 1️⃣ 调用 pair 容器类的默认构造函数。
1  pair &lt;string, int&gt; pair1;   2️⃣ 在创建 pair 容器的同时，进行初始化。
1  pair &lt;string, int&gt; pair2(&#34;语文&#34;,90);   3️⃣ 利用先前已创建好的 pair 容器和拷贝构造函数，再创建一个新的 pair 容器。
1  pair &lt;string, int&gt; pair3(pair2);   3 常见用法 3.1 手动为 pair 对象赋值
1 2  pair1.first = &#34;数学&#34;; pair1.second = &#34;100&#34;;   3.]]></description>
</item>
<item>
    <title>【动态规划】动态规划核心框架</title>
    <link>https://imcaicai.github.io/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E6%A0%B8%E5%BF%83%E6%A1%86%E6%9E%B6/</link>
    <pubDate>Sat, 18 Mar 2023 00:04:04 &#43;0800</pubDate>
    <author>菜菜</author>
    <guid>https://imcaicai.github.io/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E6%A0%B8%E5%BF%83%E6%A1%86%E6%9E%B6/</guid>
    <description><![CDATA[🔴 【动态规划三要素】重叠子问题、最优子结构、状态转移方程
🟢 【思维框架】明确 base case → 明确「状态」→ 明确「选择」 → 定义 dp 数组/函数的含义。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  # ⾃顶向下递归的动态规划 def dp(状态1, 状态2, ...): for 选择 in 所有可能的选择: # 此时的状态已经因为做了选择⽽改变 result = 求最值(result, dp(状态1, 状态2, ...)) return result # ⾃底向上迭代的动态规划 # 初始化 base case dp[0][0][...] = base case # 进⾏状态转移 for 状态1 in 状态1的所有取值： for 状态2 in 状态2的所有取值： for .]]></description>
</item>
<item>
    <title>【蓝桥杯】2020题解(下)</title>
    <link>https://imcaicai.github.io/%E8%93%9D%E6%A1%A5%E6%9D%AF2020%E4%B8%8B/</link>
    <pubDate>Fri, 17 Mar 2023 10:12:23 &#43;0800</pubDate>
    <author>菜菜</author>
    <guid>https://imcaicai.github.io/%E8%93%9D%E6%A1%A5%E6%9D%AF2020%E4%B8%8B/</guid>
    <description><![CDATA[6 跑步锻炼 题目 小蓝每天都锻炼身体。
正常情况下，小蓝每天跑 1 千米。如果某天是周一或者月初（1 日），为了激励自己，小蓝要跑 2 千米。如果同时是周一或月初，小蓝也是跑 2 千米。
小蓝跑步已经坚持了很长时间，从 2000 年 1 月 1 日周六（含）到 2020 年 10 月 1 日周四（含）。请问这段时间小蓝总共跑步多少千米？
答题总结 ⏰解题耗时：30min	🎯难度：💡
 大小月记不清。大月：1、3、5、7、8、10、12 闰年的判断方法：year%4==0 &amp;&amp; year%100!=0) || year%400==0 注意闰年的2月是29天，不是28天！（因为这个调了好久 bug 💥💢）  解析 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49  #include &lt;iostream&gt;using namespace std; // 判断是否是闰年，是则返回 true，否则返回 false bool isRun(int year){ if((year%4==0 &amp;&amp; year%100!]]></description>
</item>
<item>
    <title>【数据结构设计】实现一个计算器</title>
    <link>https://imcaicai.github.io/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%AE%A1%E7%AE%97%E5%99%A8/</link>
    <pubDate>Thu, 16 Mar 2023 21:12:41 &#43;0800</pubDate>
    <author>菜菜</author>
    <guid>https://imcaicai.github.io/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%AE%A1%E7%AE%97%E5%99%A8/</guid>
    <description><![CDATA[1 题目 实现一个计算器，功能如下：
1、输入一个字符串，可以包含 + - * /、数字、括号以及空格，你的算法返回运算结果。
2、要符合运算法则，括号的优先级最高，先乘除后加减。
3、除号是整数除法，无论正负都向 0 取整（5/2=2，-5/2=-2）。
4、可以假定输入的算式⼀定合法，且计算过程不会出现整型溢出，不会出现除数为 0 的意外情况。
2 解析 2.1 字符串转整数 1 2 3 4 5 6  // 把字符串s转为整数n int n = 0; for (int i = 0; i &lt; s.size(); i++) { char c = s[i]; n = 10 * n + (c - &#39;0&#39;); }   ❗❗❗ 注意 (c - &lsquo;0&rsquo;) 的括号不能省略，否则可能造成整型溢出。
2.2 处理加减法 🟠 先给第⼀个数字加⼀个默认符号 +，变成 +1-12+3。]]></description>
</item>
<item>
    <title>【STL】vector容器用法</title>
    <link>https://imcaicai.github.io/stlvector%E5%AE%B9%E5%99%A8%E7%94%A8%E6%B3%95/</link>
    <pubDate>Thu, 16 Mar 2023 20:09:14 &#43;0800</pubDate>
    <author>菜菜</author>
    <guid>https://imcaicai.github.io/stlvector%E5%AE%B9%E5%99%A8%E7%94%A8%E6%B3%95/</guid>
    <description><![CDATA[1 简介 🟠 vector 容器实现的是一个动态数组，即可以进行元素的插入和删除，并动态调整所占用的内存空间，整个过程无需人工干预。
🟡 在尾部插入/删除元素时，时间复杂度为O(1)；在头部或者中部插入/删除元素时，时间复杂度为O(n)。
🔵 使用需加上头文件：#include &lt;vector&gt;
2 创建vector容器 1️⃣ 调用 vector 容器类的默认构造函数。（若默认指定了 std 命令空间，则 std:: 可省略）
1  std::vector&lt;int&gt; v1;   2️⃣ 在创建 vector 容器的同时，进行初始化。
1  std::vector&lt;int&gt; v1 {2, 3, 5, 7, 11, 13, 17, 19};   3️⃣ 在创建 vector 容器时，指定元素个数。
v1 容器开始时就有 20 个元素，它们的默认初始值都为 0。圆括号中的2个参数既可以是常量，也可以是变量。
1  std::vector&lt;int&gt; v1(20, 0);   4️⃣ 通过迭代器，取已建 vector 容器中指定区域内的键值对，创建并初始化新的 vector 容器。
1 2 3 4  int array[]={1,2,3}; std::vector&lt;int&gt;v1 (array, array+2);	//v1 将保存{1,2} std::vector&lt;int&gt;v1 {1,2,3,4,5}; std::vector&lt;int&gt;v2 (std::begin(v1),std::begin(v1)+3);	//v2保存{1,2,3}   3 常用的成员方法    成员方法 功能     begin() 返回指向容器中第一个元素的迭代器。   end() 返回指向容器最后一个元素所在位置后一个位置的迭代器，通常和 begin() 结合使用。   size() 返回实际元素个数。   capacity() 返回当前容量。   empty() 判断容器中是否有元素，若无元素，则返回 true；反之，返回 false。   reserve() 增加容器的容量。   front() 返回第一个元素的引用。   back() 返回最后一个元素的引用。   push_back() 在序列的尾部添加一个元素。   pop_back() 移出序列尾部的元素。   insert() 在指定的位置插入一个或多个元素。   erase() 移出一个元素或一段元素。   clear() 移出所有的元素，容器大小变为 0。   swap() 交换两个容器的所有元素。   emplace() 在指定的位置直接生成一个元素。    ]]></description>
</item>
<item>
    <title>【数据结构设计】常数时间查找数组元素</title>
    <link>https://imcaicai.github.io/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1%E5%B8%B8%E6%95%B0%E6%97%B6%E9%97%B4%E6%9F%A5%E6%89%BE%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0/</link>
    <pubDate>Thu, 16 Mar 2023 19:13:59 &#43;0800</pubDate>
    <author>菜菜</author>
    <guid>https://imcaicai.github.io/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1%E5%B8%B8%E6%95%B0%E6%97%B6%E9%97%B4%E6%9F%A5%E6%89%BE%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0/</guid>
    <description><![CDATA[1 题目 力扣 380. O(1) 时间插入、删除和获取随机元素
实现RandomizedSet 类：
 RandomizedSet() 初始化 RandomizedSet 对象 bool insert(int val) 当元素 val 不存在时，向集合中插入该项，并返回 true ；否则，返回 false 。 bool remove(int val) 当元素 val 存在时，从集合中移除该项，并返回 true ；否则，返回 false 。 int getRandom() 随机返回现有集合中的一项（测试用例保证调用此方法时集合中至少存在一个元素）。每个元素应该有 相同的概率 被返回。  你必须实现类的所有函数，并满足每个函数的 平均 时间复杂度为 O(1) 。
2 解析 考虑题目的两个要求：
🔴 插入、删除、查询随机元素的时间复杂度必须都是 O(1)。 想到使用 STL 中的 map 结构。
🟡 getRandom() 必须等概率的返回随机元素。 那么底层必须用数组实现，且数组是紧凑的，这样就可以直接生成随机数作为数组索引。
🟢 综合考虑以上2个条件：在 O(1) 的时间删除数组中的某⼀个元素 val，可以先把这个元素交换到数组的尾部，然后再 pop 掉。而交换两个元素需要知道索引，故用哈希表存储每个元素及其索引。
代码实现：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41  class RandomizedSet { public: // 存储元素的值  vector&lt;int&gt; ve; // 键是元素值，值是元素在ve中的索引  unordered_map&lt;int, int&gt; ma; RandomizedSet() { } bool insert(int val) { // 若 val 不存在，则插入并返回true  if(ma.]]></description>
</item>
<item>
    <title>【蓝桥杯】2020题解(上)</title>
    <link>https://imcaicai.github.io/%E8%93%9D%E6%A1%A5%E6%9D%AF2020%E4%B8%8A/</link>
    <pubDate>Thu, 16 Mar 2023 14:30:51 &#43;0800</pubDate>
    <author>菜菜</author>
    <guid>https://imcaicai.github.io/%E8%93%9D%E6%A1%A5%E6%9D%AF2020%E4%B8%8A/</guid>
    <description><![CDATA[1 单词分析 题目 请你帮助小蓝，给了一个单词后，帮助他找到出现最多的字母和这 个字母出现的次数。
输入描述
输入一行包含一个单词，单词只由小写英文字母组成。
对于所有的评测用例，输入的单词长度不超过 1000。
输出描述
输出两行，第一行包含一个英文字母，表示单词中出现得最多的字母是哪个。如果有多个字母出现的次数相等，输出字典序最小的那个。
第二行包含一个整数，表示出现得最多的那个字母在单词中出现的次数。
答题总结 ⏰解题耗时：20min	🎯难度：💡
 读取输入的单个字符：while((c=getchar())!='\n') 两字符串相减就是整数，不用 (int) 强制类型转换 在 while() 的条件里用 ++，要检查是否会出错  解析 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  #include &lt;iostream&gt;using namespace std; int main(){ char c;	// 每次读取进来的字符 	int idx=0;	// 记录个数最大的下标 	int a[26]={0};	// 记录每个字符的个数 	while((c=getchar())!=&#39;\n&#39;){ a[c-&#39;a&#39;]++; } for(int i=1;i&lt;26;i++){ if(a[i]&gt;a[idx]) idx=i; } printf(&#34;%c\n%d&#34;, &#39;a&#39;+idx, a[idx]); return 0;	// 最好每次加上 }   2 成绩统计 题目 小蓝给学生们组织了一场考试，卷面总分为 100 分，每个学生的得分都是一个 0 到 100 的整数。]]></description>
</item>
<item>
    <title>【CSP】202112题解</title>
    <link>https://imcaicai.github.io/csp202112/</link>
    <pubDate>Wed, 15 Mar 2023 14:45:33 &#43;0800</pubDate>
    <author>菜菜</author>
    <guid>https://imcaicai.github.io/csp202112/</guid>
    <description><![CDATA[1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39  // 需要用 CPP11 或 CPP14 // #include&lt;bits/stdc++.h&gt; #include &lt;iostream&gt;using namespace std; int main(){ // 输入 n，m 	int n,m; scanf(&#34;%d %d&#34;,&amp;n,&amp;m); // 输入数列 	int a[n+1]={0}; for(int i=1;i&lt;=n;i++){ scanf(&#34;%d&#34;,&amp;a[i]); } // 计算 	int sum=0; int t=0; for(int i=1;i&lt;m;i++){ if(i&gt;=a[n]){ sum=sum+(m-i)*n; break; } for(int j=t+1;j&lt;=n;j++){ if(a[j]&gt;i){ t=j-1; sum=sum+t; break; } } } printf(&#34;%d&#34;, sum); }   2 错误的：]]></description>
</item>
<item>
    <title>【CSP】202203题解</title>
    <link>https://imcaicai.github.io/csp202203/</link>
    <pubDate>Tue, 14 Mar 2023 17:15:20 &#43;0800</pubDate>
    <author>菜菜</author>
    <guid>https://imcaicai.github.io/csp202203/</guid>
    <description><![CDATA[1 错误的：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38  #include &lt;iostream&gt;#include &lt;cmath&gt;// #define _USE_MATH_DEFINES  using namespace std; int main() { // 输入变量个数 n，语句个数 k 	int n,k; scanf(&#34;%d&#34;,&amp;n); scanf(&#34;%d&#34;,&amp;k); // 输入语句 	int x[n+1]={0},y[n+1]={0},a[n+1]={0}; for(int i=1;i&lt;=k;i++){ scanf(&#34;%d&#34;,&amp;x[i]); scanf(&#34;%d&#34;,&amp;y[i]); } for(int i=1;i&lt;=k;i++){ if(a[x[i]]==0){ a[x[i]]=i; } } // 记录不符合的语句个数 	int cnt=0; for(int i=1;i&lt;=k;i++){ if(y[i]!]]></description>
</item>
</channel>
</rss>
