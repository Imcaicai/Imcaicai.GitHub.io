<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>菜菜的秘密花园</title>
        <link>https://imcaicai.github.io/</link>
        <description>菜菜的秘密花园</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sun, 02 Apr 2023 11:53:31 &#43;0800</lastBuildDate>
            <atom:link href="https://imcaicai.github.io/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>【蓝桥杯】2017题解</title>
    <link>https://imcaicai.github.io/%E8%93%9D%E6%A1%A5%E6%9D%AF2017/</link>
    <pubDate>Sun, 02 Apr 2023 11:53:31 &#43;0800</pubDate>
    <author>菜菜</author>
    <guid>https://imcaicai.github.io/%E8%93%9D%E6%A1%A5%E6%9D%AF2017/</guid>
    <description><![CDATA[⏰总用时：170/240	🎯总分：32.5/100
   题号 时间 结果 满分 难度 备注     1 45 ✅ 5 🌕 🔸 计算完一定要带入样例检验，漏加了 1 ❗❗❗   2 15 ❌ 11 🌓    3 5 ❌ 13 🌓    4 5 ❌ 17 🌓    5 5 ✅ 7 🌕    6 10 ✅ 9 🌕 🔹 注意 scanf，printf 格式化输入输出的使用   7 25 ❌ 19 🌓 🔸 模拟🔸   8 5 ❌ 21 🌓 🔹 并查集（不过没用）   9 30 50% 23 🌓    10 25 ❌ 25 🌓     1 【填空】迷宫 题目 1/1+1/2+1/4+1/8+&hellip;&hellip;]]></description>
</item>
<item>
    <title>【蓝桥杯】2018题解</title>
    <link>https://imcaicai.github.io/%E8%93%9D%E6%A1%A5%E6%9D%AF2018/</link>
    <pubDate>Thu, 30 Mar 2023 15:48:27 &#43;0800</pubDate>
    <author>菜菜</author>
    <guid>https://imcaicai.github.io/%E8%93%9D%E6%A1%A5%E6%9D%AF2018/</guid>
    <description><![CDATA[⏰总用时：245/240	🎯总分：59.1/100
   题号 时间 结果 满分 难度 备注     1 5 ❌ 5 🌕 🔸 计算完一定要带入样例检验，漏加了 1 ❗❗❗   2 15 ✅ 7 🌕    3 40 ✅ 9 🌕    4 10 ✅ 13 🌕    5 5 ✅ 11 🌕    6 60 ✅ 17 🌕 🔹 注意 scanf，printf 格式化输入输出的使用   7 25 ❌ 19 🌓 🔸 模拟🔸   8 25 10% 21 🌓 🔹 并查集（不过没用）   9 10 ❌ 23 🌑    10 50 ❌ 25 🌓     1 【填空】分数 题目 1/1+1/2+1/4+1/8+&hellip;&hellip;]]></description>
</item>
<item>
    <title>【STL】queue容器用法</title>
    <link>https://imcaicai.github.io/stlqueue%E5%AE%B9%E5%99%A8%E7%94%A8%E6%B3%95/</link>
    <pubDate>Wed, 29 Mar 2023 16:38:44 &#43;0800</pubDate>
    <author>菜菜</author>
    <guid>https://imcaicai.github.io/stlqueue%E5%AE%B9%E5%99%A8%E7%94%A8%E6%B3%95/</guid>
    <description><![CDATA[1 创建queue 1  queue&lt;int&gt; q;   2 常用操作    front() 返回 queue 中第一个元素的引用。     back() 返回 queue 中最后一个元素的引用   push(T&amp;&amp; obj) 以移动的方式在 queue 的尾部添加元素。   pop() 删除 queue 中的第一个元素。   empty() 如果 queue 中没有元素的话，返回 true。   size() 返回 queue 中元素的个数。    ]]></description>
</item>
<item>
    <title>【蓝桥杯】2019题解</title>
    <link>https://imcaicai.github.io/%E8%93%9D%E6%A1%A5%E6%9D%AF2019/</link>
    <pubDate>Tue, 28 Mar 2023 08:43:22 &#43;0800</pubDate>
    <author>菜菜</author>
    <guid>https://imcaicai.github.io/%E8%93%9D%E6%A1%A5%E6%9D%AF2019/</guid>
    <description><![CDATA[⏰总用时：170	🎯总分：39
   题号 时间 结果 满分 难度 备注     1 5 ✅ 5 🌕    2 5 ✅ 5 🌕    3 5 ✅ 10 🌕    4 20 ❌ 10 🌓 🔹 用 BFS、queue 遍历🔹 输入地图时用 char 而不是 int   5 35 ❌ 10 🌓 🔸 快速计算 $a^b(mod p)$🔸 快速计算 $a*b(mod p)$   6 20 20% 15 🌓 🔹 二叉树🔹 先算出每个节点所在层数，再根据层数算总和，这样不会超时   7 40 40% 20 🌓 🔸 模拟🔸 用 map 容器，以外卖店的视角存储订单信息🔸 可以通过的，要注意易错的细节❗❗❗   8 30 40% 20 🌓 🔹 并查集（不过没用）   9 10 ❌ 25 🌑    10   25      1 【填空】求和 题目 小明对数位中含有 2、0、1、9 的数字很感兴趣，在 1 到 40 中这样的数包括 1、2、9、10 至 32、39 和 40，共 28 个，他们的和是 574。]]></description>
</item>
<item>
    <title>【蓝桥杯】2022题解</title>
    <link>https://imcaicai.github.io/%E8%93%9D%E6%A1%A5%E6%9D%AF2022/</link>
    <pubDate>Wed, 22 Mar 2023 10:39:32 &#43;0800</pubDate>
    <author>菜菜</author>
    <guid>https://imcaicai.github.io/%E8%93%9D%E6%A1%A5%E6%9D%AF2022/</guid>
    <description><![CDATA[⏰总用时：125	🎯总分：14.5
   题号 时间 结果 满分 难度 备注     1 5 ✅ 5 🌕    2 5 ❌ 5 🌓 🔹 博弈论：只能转移到必胜态的，均为必败态。可以转移到必败态的，均为必胜态🔹 c++中计算字符串中某字符个数：count(s.begin(),s.end(),&lsquo;o&rsquo;)🔹 DFS：深搜的时候保存已有结果🔹 二维数组可直接压缩为一维数组🔹 遍历不连续数组，可把要遍历的索引存储在一个数组中   3 5 30% 10 🌕 🔸 先观察所求式子能否化简，注意超时问题🔸 注意题目所给数据范围，答案应该用 long long型   4 30 40% 10 🌓 🔹 巧妙构造数组可以简化题目🔹 若 a ^ b=x，则 a ^ x=b， b ^ x=a。🔹 可以用 map 来映射一组数和他们的索引🔹 直接把异或表达式放 if 语句或输出语句中会出错   5 5 ❌ 10 🌑 🔸 【分数取模】、【快速幂】🔸 注意找递推关系🔸 加快输入速度：ios::sync_with_stdio(false); cin.]]></description>
</item>
<item>
    <title>【蓝桥杯】2021题解</title>
    <link>https://imcaicai.github.io/%E8%93%9D%E6%A1%A5%E6%9D%AF2021/</link>
    <pubDate>Mon, 20 Mar 2023 17:00:10 &#43;0800</pubDate>
    <author>菜菜</author>
    <guid>https://imcaicai.github.io/%E8%93%9D%E6%A1%A5%E6%9D%AF2021/</guid>
    <description><![CDATA[⏰总用时：177min	🎯总分：0
   题号 时间 结果 满分 难度 备注     1 20 ❌ 5 🌕 🔸【计算一个整数各位上的数字】：当 i/10!=0 时，不断取出 i%10 。   2 7 ❌ 5 🌕 🔹 确定一条直线要考虑斜率和截距   3 40 ❌ 10 🌓 🔸 整数问题常用【取模】   4 35 ❌ 10 🌕 🔹 二维数组太大容易引起报错：program received signal sigsegv, segmentation fault. （本题中用 int g[2022][2022]; 就报错了QAQ）   5 45 ❌ 10 🌑    6 25 ❌ 15 🌓 🔹 用迭代器循环时不能修改 set 内元素   7 5 ❌ 20 🌓    8   20     9   25     10   25      1 【填空】卡片 题目 小蓝有很多数字卡片，每张卡片上都是数字 0 到 9。小蓝准备用这些卡片来拼一些数，他想从 1 开始拼出正整数，每拼一个，就保存起来，卡片就不能用来拼其它数了。小蓝想知道自己能从 1 拼到多少。]]></description>
</item>
<item>
    <title>【STL】pair容器用法</title>
    <link>https://imcaicai.github.io/stlpair%E5%AE%B9%E5%99%A8%E7%94%A8%E6%B3%95/</link>
    <pubDate>Sat, 18 Mar 2023 19:24:15 &#43;0800</pubDate>
    <author>菜菜</author>
    <guid>https://imcaicai.github.io/stlpair%E5%AE%B9%E5%99%A8%E7%94%A8%E6%B3%95/</guid>
    <description><![CDATA[1 简介 🟠 pair 容器将 2 个普通元素 first 和 second（C++ 基本数据类型、结构体、类自定的类型等）创建成一个新元素&lt;first, second&gt;。
🔵 使用需加上头文件：#include &lt;utility&gt;
2 创建map容器 1️⃣ 调用 pair 容器类的默认构造函数。
1  pair &lt;string, int&gt; pair1;   2️⃣ 在创建 pair 容器的同时，进行初始化。
1  pair &lt;string, int&gt; pair2(&#34;语文&#34;,90);   3️⃣ 利用先前已创建好的 pair 容器和拷贝构造函数，再创建一个新的 pair 容器。
1  pair &lt;string, int&gt; pair3(pair2);   3 常见用法 3.1 手动为 pair 对象赋值
1 2  pair1.first = &#34;数学&#34;; pair1.second = &#34;100&#34;;   3.]]></description>
</item>
<item>
    <title>【动态规划】动态规划核心框架</title>
    <link>https://imcaicai.github.io/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E6%A0%B8%E5%BF%83%E6%A1%86%E6%9E%B6/</link>
    <pubDate>Sat, 18 Mar 2023 00:04:04 &#43;0800</pubDate>
    <author>菜菜</author>
    <guid>https://imcaicai.github.io/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E6%A0%B8%E5%BF%83%E6%A1%86%E6%9E%B6/</guid>
    <description><![CDATA[🔴 【动态规划三要素】重叠子问题、最优子结构、状态转移方程
🟢 【思维框架】明确 base case → 明确「状态」→ 明确「选择」 → 定义 dp 数组/函数的含义。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  # ⾃顶向下递归的动态规划 def dp(状态1, 状态2, ...): for 选择 in 所有可能的选择: # 此时的状态已经因为做了选择⽽改变 result = 求最值(result, dp(状态1, 状态2, ...)) return result # ⾃底向上迭代的动态规划 # 初始化 base case dp[0][0][...] = base case # 进⾏状态转移 for 状态1 in 状态1的所有取值： for 状态2 in 状态2的所有取值： for .]]></description>
</item>
<item>
    <title>【数据结构设计】实现一个计算器</title>
    <link>https://imcaicai.github.io/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%AE%A1%E7%AE%97%E5%99%A8/</link>
    <pubDate>Thu, 16 Mar 2023 21:12:41 &#43;0800</pubDate>
    <author>菜菜</author>
    <guid>https://imcaicai.github.io/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%AE%A1%E7%AE%97%E5%99%A8/</guid>
    <description><![CDATA[1 题目 实现一个计算器，功能如下：
1、输入一个字符串，可以包含 + - * /、数字、括号以及空格，你的算法返回运算结果。
2、要符合运算法则，括号的优先级最高，先乘除后加减。
3、除号是整数除法，无论正负都向 0 取整（5/2=2，-5/2=-2）。
4、可以假定输入的算式⼀定合法，且计算过程不会出现整型溢出，不会出现除数为 0 的意外情况。
2 解析 2.1 字符串转整数 1 2 3 4 5 6  // 把字符串s转为整数n int n = 0; for (int i = 0; i &lt; s.size(); i++) { char c = s[i]; n = 10 * n + (c - &#39;0&#39;); }   ❗❗❗ 注意 (c - &lsquo;0&rsquo;) 的括号不能省略，否则可能造成整型溢出。
2.2 处理加减法 🟠 先给第⼀个数字加⼀个默认符号 +，变成 +1-12+3。]]></description>
</item>
<item>
    <title>【STL】vector容器用法</title>
    <link>https://imcaicai.github.io/stlvector%E5%AE%B9%E5%99%A8%E7%94%A8%E6%B3%95/</link>
    <pubDate>Thu, 16 Mar 2023 20:09:14 &#43;0800</pubDate>
    <author>菜菜</author>
    <guid>https://imcaicai.github.io/stlvector%E5%AE%B9%E5%99%A8%E7%94%A8%E6%B3%95/</guid>
    <description><![CDATA[1 简介 🟠 vector 容器实现的是一个动态数组，即可以进行元素的插入和删除，并动态调整所占用的内存空间，整个过程无需人工干预。
🟡 在尾部插入/删除元素时，时间复杂度为O(1)；在头部或者中部插入/删除元素时，时间复杂度为O(n)。
🔵 使用需加上头文件：#include &lt;vector&gt;
2 创建vector容器 1️⃣ 调用 vector 容器类的默认构造函数。（若默认指定了 std 命令空间，则 std:: 可省略）
1  std::vector&lt;int&gt; v1;   2️⃣ 在创建 vector 容器的同时，进行初始化。
1  std::vector&lt;int&gt; v1 {2, 3, 5, 7, 11, 13, 17, 19};   3️⃣ 在创建 vector 容器时，指定元素个数。
v1 容器开始时就有 20 个元素，它们的默认初始值都为 0。圆括号中的2个参数既可以是常量，也可以是变量。
1  std::vector&lt;int&gt; v1(20, 0);   4️⃣ 通过迭代器，取已建 vector 容器中指定区域内的键值对，创建并初始化新的 vector 容器。
1 2 3 4  int array[]={1,2,3}; std::vector&lt;int&gt;v1 (array, array+2);	//v1 将保存{1,2} std::vector&lt;int&gt;v1 {1,2,3,4,5}; std::vector&lt;int&gt;v2 (std::begin(v1),std::begin(v1)+3);	//v2保存{1,2,3}   3 常用的成员方法    成员方法 功能     begin() 返回指向容器中第一个元素的迭代器。   end() 返回指向容器最后一个元素所在位置后一个位置的迭代器，通常和 begin() 结合使用。   size() 返回实际元素个数。   capacity() 返回当前容量。   empty() 判断容器中是否有元素，若无元素，则返回 true；反之，返回 false。   reserve() 增加容器的容量。   front() 返回第一个元素的引用。   back() 返回最后一个元素的引用。   push_back() 在序列的尾部添加一个元素。   pop_back() 移出序列尾部的元素。   insert() 在指定的位置插入一个或多个元素。   erase() 移出一个元素或一段元素。   clear() 移出所有的元素，容器大小变为 0。   swap() 交换两个容器的所有元素。   emplace() 在指定的位置直接生成一个元素。    ]]></description>
</item>
</channel>
</rss>
