<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>C&#43;&#43; - Tag - 菜菜的秘密花园</title>
        <link>https://imcaicai.github.io/tags/c&#43;&#43;/</link>
        <description>C&#43;&#43; - Tag - 菜菜的秘密花园</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Thu, 31 Aug 2023 15:15:58 &#43;0800</lastBuildDate><atom:link href="https://imcaicai.github.io/tags/c&#43;&#43;/" rel="self" type="application/rss+xml" /><item>
    <title>【CSP】202303题解</title>
    <link>https://imcaicai.github.io/csp202306/</link>
    <pubDate>Thu, 31 Aug 2023 15:15:58 &#43;0800</pubDate>
    <author>菜菜</author>
    <guid>https://imcaicai.github.io/csp202306/</guid>
    <description><![CDATA[1 重复局面 🔗 题目：重复局面
将一盘局的局面表示为一个长度为64的字符串。
建立map映射，key为字符串表示的局面，value为出现的次数。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  #include&lt;bits/stdc++.h&gt;using namespace std; map&lt;string,int&gt; mp; int n; int main(){ cin&gt;&gt;n; for(int i=0;i&lt;n;i++){ string s=&#34;&#34;,tmp; for(int j=0;j&lt;8;j++){ cin&gt;&gt;tmp; s = s+tmp; } mp[s] += 1; cout&lt;&lt;mp[s]&lt;&lt;endl; } }   2 矩阵运算 🔗 题目：矩阵运算
改变矩阵运算的顺序，可以减中间结果的存储空间和运行时间。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39  #include&lt;bits/stdc++.]]></description>
</item>
<item>
    <title>【CSP】202006题解</title>
    <link>https://imcaicai.github.io/csp202006/</link>
    <pubDate>Thu, 25 May 2023 19:09:17 &#43;0800</pubDate>
    <author>菜菜</author>
    <guid>https://imcaicai.github.io/csp202006/</guid>
    <description><![CDATA[1 线性分类器 🔗 题目：线性分类器
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47  #include&lt;bits/stdc++.h&gt;using namespace std; struct node{ int x,y; }; int main(){ int n,m,a,b,c,x,y,s; vector&lt;node&gt; v1,v2; char t; cin&gt;&gt;n&gt;&gt;m; for(int i=0;i&lt;n;i++){ cin&gt;&gt;x&gt;&gt;y&gt;&gt;t; if(t==&#39;A&#39;) v1.]]></description>
</item>
<item>
    <title>【CSP】202009题解</title>
    <link>https://imcaicai.github.io/csp202009/</link>
    <pubDate>Tue, 23 May 2023 16:16:26 &#43;0800</pubDate>
    <author>菜菜</author>
    <guid>https://imcaicai.github.io/csp202009/</guid>
    <description><![CDATA[1 称检测点查询 🔗 题目：称检测点查询
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  #include&lt;bits/stdc++.h&gt;using namespace std; int main(){	int n,x,y,a,b,d,ans[3][2]; scanf(&#34;%d %d %d&#34;,&amp;n,&amp;x,&amp;y); ans[0][0]=ans[1][0]=ans[2][0]=100000000; for(int i=1;i&lt;=n;i++){ scanf(&#34;%d %d&#34;,&amp;a,&amp;b); d=(x-a)*(x-a)+(y-b)*(y-b); if(d&gt;=ans[0][0]) continue; else if(d&gt;=ans[1][0]){ ans[0][0]=d,ans[0][1]=i; } else if(d&gt;=ans[2][0]){ ans[0][0]=ans[1][0],ans[0][1]=ans[1][1]; ans[1][0]=d,ans[1][1]=i; } else{ ans[0][0]=ans[1][0],ans[0][1]=ans[1][1]; ans[1][0]=ans[2][0],ans[1][1]=ans[2][1]; ans[2][0]=d,ans[2][1]=i; } } printf(&#34;%d\n%d\n%d&#34;,ans[2][1],ans[1][1],ans[0][1]); return 0; }   2 风险人群筛查 🔗 题目：风险人群筛查]]></description>
</item>
<item>
    <title>【CSP】202104题解</title>
    <link>https://imcaicai.github.io/csp202104/</link>
    <pubDate>Sun, 21 May 2023 13:03:16 &#43;0800</pubDate>
    <author>菜菜</author>
    <guid>https://imcaicai.github.io/csp202104/</guid>
    <description><![CDATA[1 灰度直方图 🔗 题目：灰度直方图
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  #include&lt;bits/stdc++.h&gt;using namespace std; int main(){ int n,m,l,a,h[300]={0}; scanf(&#34;%d %d %d&#34;,&amp;n,&amp;m,&amp;l); for(int i=0;i&lt;n;i++){ for(int j=0;j&lt;m;j++){ scanf(&#34;%d&#34;,&amp;a); h[a]++; } } for(int i=0;i&lt;l;i++) printf(&#34;%d &#34;,h[i]); return 0; }   2 邻域均值 🔗 题目：邻域均值
🔴 求矩阵中一个框内的元素和：用二维压缩数组
🔵 判断时注意整数除法会向下取整，不能用 if(sum/t&lt;=num) ，而应用 if(sum&lt;=t*num) 。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  #include&lt;bits/stdc++.]]></description>
</item>
<item>
    <title>【CSP】202012题解</title>
    <link>https://imcaicai.github.io/csp202012/</link>
    <pubDate>Sun, 21 May 2023 12:07:03 &#43;0800</pubDate>
    <author>菜菜</author>
    <guid>https://imcaicai.github.io/csp202012/</guid>
    <description><![CDATA[1 期末预测之安全指数 🔗 题目：期末预测之安全指数
1 2 3 4 5 6 7 8 9 10 11 12 13 14  #include&lt;bits/stdc++.h&gt;using namespace std; int main(){ int n,w,s,y=0; scanf(&#34;%d&#34;,&amp;n); for(int i=0;i&lt;n;i++){ scanf(&#34;%d %d&#34;,&amp;w,&amp;s); y += w*s; } if(y&gt;0)	cout&lt;&lt;y; else cout&lt;&lt;0; return 0; }   2 期末预测之最佳阈值 🔗 题目：期末预测之最佳阈值
用 set 和 map 会方便很多。要找递推关系！！！
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  #include&lt;bits/stdc++.]]></description>
</item>
<item>
    <title>【CSP】202109题解</title>
    <link>https://imcaicai.github.io/csp202109/</link>
    <pubDate>Sun, 21 May 2023 11:15:52 &#43;0800</pubDate>
    <author>菜菜</author>
    <guid>https://imcaicai.github.io/csp202109/</guid>
    <description><![CDATA[1 数组推导 🔗 题目：数组推导
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  #include&lt;bits/stdc++.h&gt;using namespace std; int main(){ int n,s1=0,s2=0,b[105]={0}; scanf(&#34;%d&#34;,&amp;n); for(int i=1;i&lt;=n;i++) scanf(&#34;%d&#34;,&amp;b[i]); for(int i=n;i&gt;=1;i--){ s1+=b[i]; if(b[i]&gt;b[i-1])	s2+=b[i];	// a[i]=b[i] 	} cout&lt;&lt;s1&lt;&lt;endl&lt;&lt;s2&lt;&lt;endl; return 0; }   2 非零段划分 🔗 题目：非零段划分
🔴 这个题目刚看上去有点难，需要找前后的递推关系。倒序遍历 a[n]，来确定 p 的值。用 set 和 map 会方便很多。
🔵 set 的倒序遍历：
1 2  set&lt;int&gt;::reverse_iterator rit; for (rit=s.rbegin();rit!=s.rend();rit++){.....}   完整代码：]]></description>
</item>
<item>
    <title>【STL】bitset容器用法</title>
    <link>https://imcaicai.github.io/stlbitset%E5%AE%B9%E5%99%A8%E7%94%A8%E6%B3%95/</link>
    <pubDate>Thu, 18 May 2023 20:14:45 &#43;0800</pubDate>
    <author>菜菜</author>
    <guid>https://imcaicai.github.io/stlbitset%E5%AE%B9%E5%99%A8%E7%94%A8%E6%B3%95/</guid>
    <description><![CDATA[1 简介 🟠 由若干个位（bit）组成，它提供一些成员函数，使程序员不必通过位运算就能很方便地访问、修改其中的任意一位。
2 创建 1️⃣ 调用默认构造函数。
1  bitset&lt;N&gt; b;   3 常用的成员方法    成员方法 功能     count() 返回bitset中 1 的个数。   size() 返回位数。   test() 返回某一位下标是否为1   set() 全部置1,或者某一位置1或0   flip() 全部取反,或者某一位取反    ]]></description>
</item>
<item>
    <title>【CSP】刷题汇总</title>
    <link>https://imcaicai.github.io/csp%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/</link>
    <pubDate>Thu, 18 May 2023 20:12:04 &#43;0800</pubDate>
    <author>菜菜</author>
    <guid>https://imcaicai.github.io/csp%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/</guid>
    <description><![CDATA[🔗 202303    题号 时间/min 正确率 备注     1 20 100    2 30 100    3 40 0 🔸 bitset、map、set用法🔸 堆栈    🔗 202212    题号 时间/min 正确率 备注     1 10 100    2 45 100 🔸 fill函数   3 65 100 🔸 蛇形填充：规模较小时，可用一个矩阵专门写出下标🔸 cos函数    🔗 202209    题号 时间/min 正确率 备注     1 10 100    2 40 100 🔸 动态规划：01背包问题   3 100 40 🔸 实在做不出来留1h把简单的情况做了🔸 map 的 erase 用法🔸 选好数据结构很重要！    🔗 202206    题号 时间/min 正确率 备注     1 10 100    2 30 100 🔸 题目给的一串数字不一定是顺序的，不要想当然！   3 120 100 🔸 cin/cout 提速🔸 vector 查找元素较慢，可用 set    🔗 202203    题号 时间/min 正确率 备注     1 10 100    2 35 100    3       🔗 202112    题号 时间/min 正确率 备注     1 15 100    2 30 100    3 120 40 🔸 注意审题！bug调不出来最好重读一遍题目！🔸 计算多项式中x的系数：找递推关系🔸 模拟多项式除法    🔗 202109    题号 时间/min 正确率 备注     1 10 100    2 50 100 🔸 找前后递推关系🔸 set 的倒序遍历；map   3       🔗 202104    题号 时间/min 正确率 备注     1 10 100    2 60 100 🔸 二维压缩数组🔸 判断时注意整数除法会向下取整   3       🔗 202012    题号 时间/min 正确率 备注     1 5 100    2 40 100 🔸 找递推关系🔸 对不规则排列的数组，用 set 和 map 会快很多   3       🔗 202009    题号 时间/min 正确率 备注     1 30 100    2 20 100    3       🔗 202006    题号 时间/min 正确率 备注     1 30 100    2 20 100    3       ]]></description>
</item>
<item>
    <title>【CSP】202303题解</title>
    <link>https://imcaicai.github.io/csp202303/</link>
    <pubDate>Sun, 23 Apr 2023 21:02:45 &#43;0800</pubDate>
    <author>菜菜</author>
    <guid>https://imcaicai.github.io/csp202303/</guid>
    <description><![CDATA[1 田地丈量 🔗 题目：田地丈量
分情况求出长、宽，再计算总和即可。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  #include&lt;bits/stdc++.h&gt;using namespace std; int n,a,b,x1,y1,x2,y2,x,y,ans=0; int main(){ cin&gt;&gt;n&gt;&gt;a&gt;&gt;b; for(int i=0;i&lt;n;i++){ cin&gt;&gt;x1&gt;&gt;y1&gt;&gt;x2&gt;&gt;y2; if(x1&gt;=a || y1&gt;=b || x2&lt;=0 || y2&lt;=0)	continue; if(x1&lt;=0)	x=min(a,x2); else	x=min(a,x2)-x1; if(y1&lt;=0)	y=min(b,y2); else	y=min(b,y2)-y1; ans += x*y; } cout&lt;&lt;ans; }   2 垦田计划 🔗 题目：垦田计划
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  #include&lt;bits/stdc++.]]></description>
</item>
<item>
    <title>【蓝桥杯】2015题解</title>
    <link>https://imcaicai.github.io/%E8%93%9D%E6%A1%A5%E6%9D%AF2015/</link>
    <pubDate>Tue, 04 Apr 2023 08:14:24 &#43;0800</pubDate>
    <author>菜菜</author>
    <guid>https://imcaicai.github.io/%E8%93%9D%E6%A1%A5%E6%9D%AF2015/</guid>
    <description><![CDATA[⏰总用时：89/240	🎯总分：73/150
   题号 时间 结果 满分 难度 备注     1 3 ✅ 3 🌕    2 3 ✅ 5 🌕 🔹 在Excel中直接用日期格式拉出答案   3 10 ✅ 9 🌕 🔸 直接用next_permutation(a,a+10) 来枚举   4 15 ✅ 11 🌕 🔹 注意 printf、scanf 中 %*s 的用法   5 1 ✅ 15 🌕 🔸 注意此题 dfs 的用法   6 15 ✅ 17 🌕 🔹 dfs   7 10 ❌ 21 🌓 🔸 全排列+特殊去重🔸 去重旋转：判断 t 是否是 s+s 的子串🔸 在字符串中寻找子串：s.]]></description>
</item>
</channel>
</rss>
