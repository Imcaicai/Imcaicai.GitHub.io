<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>index - Tag - 菜菜的秘密花园</title>
        <link>https://imcaicai.github.io/tags/index/</link>
        <description>index - Tag - 菜菜的秘密花园</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Mon, 01 May 2023 23:35:11 &#43;0800</lastBuildDate><atom:link href="https://imcaicai.github.io/tags/index/" rel="self" type="application/rss+xml" /><item>
    <title>Access Path Selection in Main-Memory Optimized Data Systems</title>
    <link>https://imcaicai.github.io/access-path-selection-in-main-memory-optimized-data-systems/</link>
    <pubDate>Mon, 01 May 2023 23:35:11 &#43;0800</pubDate>
    <author>菜菜</author>
    <guid>https://imcaicai.github.io/access-path-selection-in-main-memory-optimized-data-systems/</guid>
    <description><![CDATA[ABSTRACT]]></description>
</item>
<item>
    <title>Slalom Coasting Through Raw Data via Adaptive Partitioning and Indexing</title>
    <link>https://imcaicai.github.io/slalom-coasting-through-raw-data-via-adaptive-partitioning-and-indexing/</link>
    <pubDate>Sat, 22 Apr 2023 13:08:20 &#43;0800</pubDate>
    <author>菜菜</author>
    <guid>https://imcaicai.github.io/slalom-coasting-through-raw-data-via-adaptive-partitioning-and-indexing/</guid>
    <description><![CDATA[本文为论文 Slalom: Coasting Through Raw Data via Adaptive Partitioning and Indexing 的阅读笔记。
 🟠 Slalom
 一个通过监视用户访问模式来适应工作负载变化的原位查询引擎。  🟡 关键组件
 在线分区和索引方案 为原位查询引擎量身定制的分区和索引调优器。  🟢 性能优势
 对原始数据文件进行逻辑分区；为每个分区构建轻量级分区特定的索引   1 简介 🟠 加载、索引和调优的成本
考虑到所涉及的数据大小，对数据的任何转换、复制和准备步骤都会在查询数据前引入大量延迟。缺乏对工作负载的先验知识使得物理设计决策几乎不可能。
🟡 自适应分区和细粒度索引
 使用第一次表扫描来生成分区和轻量级索引提示 数据集以动态方式部分索引，以适应三个关键工作负载特征：数据分布；查询类型；投影属性。 调优器通过以下方式降低数据访问成本:  对原始数据集进行逻辑分区，在不进行物理重构的情况下将其虚拟地分解为更易于管理的块 在每个逻辑分区上选择适当的索引策略，以提供有效的数据访问。（细粒度的索引决策）    🟢 基于Slalom的高效 In-Situ Query
 将在线分区和索引调谐器集成到原位查询处理原型系统Slalom中 Slalom在逻辑上将原始数据划分为分区，并根据每个分区的“热度”(访问频率)、针对每个分区的查询类型来选择构建哪个细粒度的分区索引。 Slalom填充二进制缓存(从原始数据转换为二进制数据的缓存)以进一步提高性能 Slalom使用基于随机成本的决策算法调整当前分区和索引方案来适应工作负载的变化  🔵 贡献
 我们提出了原始数据文件的逻辑分区方案，该方案支持在每个分区级别上进行细粒度的索引决策。 好处：带来了原位查询处理索引的好处；索引构建成本低；内存占用小。 我们将分区和索引调谐器集成到我们最先进的原型原位查询引擎Slalom中。  2 相关工作 🟣 对原始数据的查询
 Slalom使用的技术可以通过减少索引的大小、为每个文件分区构建内存效率高的索引来提高系统的可伸缩性。 Slalom不加载所有数据，而是利用工作负载局域性自适应地为原始数据创建细粒度索引方案，并逐渐减少I/O和访问成本，同时在适度的内存预算下运行。  🔵 数据库分区]]></description>
</item>
<item>
    <title>An Experimental Evaluation of Index Selection Algorithms</title>
    <link>https://imcaicai.github.io/an-experimental-evaluation-of-index-selection-algorithms/</link>
    <pubDate>Tue, 11 Apr 2023 18:15:39 &#43;0800</pubDate>
    <author>菜菜</author>
    <guid>https://imcaicai.github.io/an-experimental-evaluation-of-index-selection-algorithms/</guid>
    <description><![CDATA[本文为论文 Magic mirror in my hand, which is the best in the land?An Experimental Evaluation of Index Selection Algorithms 的阅读笔记。
1 引言 🟠 索引对于高效处理数据库工作负载来说很重要，针对索引选择提出的方案有很多，主要的难点是：
 解空间是巨大的：随索引数量、列、类型增加 索引间相互作用 很难在部署运行前量化索引对工作负载的影响  🟡 本文描述和分析了 8 种基于不同概念的索引选择算法，并沿着不同的维度进行比较，如解决方案质量、运行时长、多列支持、解决方案粒度和复杂性。
🟢 虚拟索引（hypothetical indexes）
为了避免执行查询、创建索引，一些数据库系统支持虚拟索引，通过它来估计成本。
2 索引选择算法 索引选择算法的里程碑时间轴如下：
2.1 Drop
这种方法依次删除候选索引，直到不能进一步降低成本为止。成本是由数据的特征决定的，而不是由查询优化器决定的。不支持多列索引的选择
2.2 AutoAdmin
该迭代算法通过在每次迭代中增加索引宽度来识别多列索引。首先从每个查询 $j=1,&hellip;Q$ 确定候选索引 $S_j$ ，再将所有查询的候选并集作为第二步的输入，确定最佳索引配置时考虑所有查询。
2.3 (Anytime) DTA
首先确定每个查询的候选索引，然后根据原始贪婪枚举确定整个工作负载的索引配置。
2.4 DB2Advis
① 确定候选索引：对每个查询 j ，在列上创建假设索引。然后，向优化器询问查询 j 的最佳计划，在结果计划中使用的假设索引被添加到索引候选集。
② I 中的所有候选索引都按照它们的逐空间效益比降序排序。下面，如果索引对w1的比值更高，则组合索引对w1和w2，直到达到存储预算。
③ 将先前计算的解决方案集与不属于的索引集交换，看成本是否降低。
2.5 Relaxation
① 为每个查询获取最佳索引配置。]]></description>
</item>
</channel>
</rss>
