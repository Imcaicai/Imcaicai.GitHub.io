<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>go - Category - 菜菜的秘密花园</title>
        <link>https://imcaicai.github.io/categories/go/</link>
        <description>go - Category - 菜菜的秘密花园</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Thu, 20 Oct 2022 19:56:54 &#43;0800</lastBuildDate><atom:link href="https://imcaicai.github.io/categories/go/" rel="self" type="application/rss+xml" /><item>
    <title>Echo</title>
    <link>https://imcaicai.github.io/echo/</link>
    <pubDate>Thu, 20 Oct 2022 19:56:54 &#43;0800</pubDate>
    <author>菜菜</author>
    <guid>https://imcaicai.github.io/echo/</guid>
    <description><![CDATA[echo框架入门
1 路由与控制器 1 路由规则  一条路由规则由：http请求方法 , url路径 , 控制器函数  组成  1.http请求方法
 GET POST PUT DELETE  2.url路径
 静态url路径 带路径参数的url路径 带星号（*）模糊匹配参数的url路径  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  // 例子1， 静态Url路径, 即不带任何参数的url路径 /users/center /user/101 /food/100 // 例子2，带路径参数的url路径，url路径上面带有参数,参数由冒号（:）跟着一个字符串定义。 // 路径参数值可以是数值，也可以是字符串  //定义参数:id， 可以匹配/user/1, /user/899 /user/xiaoli 这类Url路径 /user/:id //定义参数:id， 可以匹配/food/2, /food/100 /food/apple 这类Url路径 /food/:id //定义参数:type和:page， 可以匹配/foods/2/1, /food/100/25 /food/apple/30 这类Url路径 /foods/:type/:page // 例子3.]]></description>
</item>
<item>
    <title>Go-net标准库应用</title>
    <link>https://imcaicai.github.io/go-net%E6%A0%87%E5%87%86%E5%BA%93%E5%BA%94%E7%94%A8/</link>
    <pubDate>Thu, 20 Oct 2022 00:00:00 &#43;0000</pubDate>
    <author>菜菜</author>
    <guid>https://imcaicai.github.io/go-net%E6%A0%87%E5%87%86%E5%BA%93%E5%BA%94%E7%94%A8/</guid>
    <description><![CDATA[在go语言标准库中，net包提供了可移植的网络I/O接口，包括TCP/IP、UDP、域名解析和Unix域socket。
1 服务端 1. 解析地址 在TCP服务端我们需要监听一个TCP地址，因此建立服务端前我们需要生成一个正确的TCP地址，这就需要用到 Resolve 函数。
1 2 3 4 5 6 7 8  // ResolveTCPAddr函数会输出一个TCP连接地址和一个错误信息 func ResolveTCPAddr(network, address string) (*TCPAddr, error) // 解析IP地址 func ResolveIPAddr(net, addr string) (*IPAddr, error) // 解析UDP地址 func ResolveUDPAddr(net, addr string) (*UDPAddr, error) // 解析Unix地址 func ResolveUnixAddr(net, addr string) (*UnixAddr, error)   2. 监听请求 我们可以通过 Listen 方法监听我们解析后的网络地址。
1 2 3 4 5 6 7 8 9 10 11 12  // 监听net类型，地址为laddr的地址 func Listen(net, laddr string) (Listener, error) // 监听TCP地址 func ListenTCP(network string, laddr *TCPAddr) (*TCPListener, error) // 监听IP地址 func ListenIP(netProto string, laddr *IPAddr) (*IPConn, error) // 监听UDP地址 func ListenMulticastUDP(net string, ifi *Interface, gaddr *UDPAddr) (*UDPConn, error) func ListenUDP(net string, laddr *UDPAddr) (*UDPConn, error) // 监听Unix地址 func ListenUnixgram(net string, laddr *UnixAddr) (*UnixConn, error) func ListenUnix(net string, laddr *UnixAddr) (*UnixListener, error)   3.]]></description>
</item>
<item>
    <title>Go基本语法</title>
    <link>https://imcaicai.github.io/go/</link>
    <pubDate>Sun, 16 Oct 2022 00:00:00 &#43;0000</pubDate>
    <author>菜菜</author>
    <guid>https://imcaicai.github.io/go/</guid>
    <description><![CDATA[1 结构  go run helloworld.go：执行Go代码 go build helloworld.go：编译生成二进制文件 ./helloworld：运行 import 声明必须跟在文件的 package 声明之后 Go 语言不需要在语句或者声明的末尾添加分号，除非一行上有多条语句  函数的左括号 { 必须和 func 函数声明在同一行上，且位于末尾，不能独占一行 在表达式 x+y 中，可在 + 后换行，不能在 + 前换行    2 基础语法 1 2 3 4 5 6  //格式化字符串 var stockcode = 123 var enddate = &#34;2020-12-31&#34; var url = &#34;Code=%d&amp;endDate=%s&#34; var target_url = fmt.Sprintf(url, stockcode, enddate) fmt.Println(target_url)   3 语言类型   布尔型
  数字型]]></description>
</item>
</channel>
</rss>
