<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>论文阅读笔记 - Category - 菜菜的秘密花园</title>
        <link>https://imcaicai.github.io/categories/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</link>
        <description>论文阅读笔记 - Category - 菜菜的秘密花园</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Wed, 03 May 2023 19:09:22 &#43;0800</lastBuildDate><atom:link href="https://imcaicai.github.io/categories/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/" rel="self" type="application/rss+xml" /><item>
    <title>SWIRL: Selection of Workload-aware Indexes using Reinforcement Learning</title>
    <link>https://imcaicai.github.io/swirl/</link>
    <pubDate>Wed, 03 May 2023 19:09:22 &#43;0800</pubDate>
    <author>菜菜</author>
    <guid>https://imcaicai.github.io/swirl/</guid>
    <description><![CDATA[本文为论文 SWIRL: Selection of Workload-aware Indexes using Reinforcement Learning 的阅读笔记。
1 简介  🔴 我们提出了一种基于RL的索引选择方法，与最好的竞争者的性能相匹配。
🟡 我们的解决方案采用了一个复杂的工作负载模型，以推广到具有未见过的查询的工作负载，并依靠无效动作屏蔽来减少训练时间。
🔵 我们包括了基于RL的索引选择的首次调查和性能研究，并通过PostgreSQL上复杂的分析性数据库基准评估我们的方法。
  2 背景 2.1 索引选择问题 大的解决方案空间。 相关候选索引的数量取决于工作负载查询访问的属性数量、每个索引的最大属性数量。评估所有候选组合通常是不切实际的，因为它们的数量超过了属性的数量级。
索引交互。 一个索引的存在会影响其他索引的性能。因此，在索引选择的每个步骤中，必须要考虑到当前存在的索引，经常需要重新计算候选索引的收益。
量化索引影响。 漫长的创建和执行时间使得物理上创建索引并不可行。索引选择方法通常依赖于估计而不是实际测量。（假设索引）
2.2 问题定义 假设有 N 个查询，K 个属性，每个查询 n 的属性表示为 $q_n⊆{1,&hellip;,K},n=1,&hellip;,K$ 。 W为每个索引包含的属性个数（索引宽度），$m_i$ 为需要的存储空间。索引的选择由子集 $I^*⊆I$ 表示，其执行成本为 $c_n(I^*)$ ，出现频率为 $f_n$ 。总的工作负载成本为：
目标是确定 $I^*$ 使 $C(I^*)$ 最小，并且不超过给定预算 B。
2.3 强化学习 强化学习（RL）包括一组算法，用于解决决策问题。
这些问题的特点是，在给定状态 $s_t∈S$ ，反复允许一个代理执行行动 $a_t$ ，其中 $a_t∈A$ 。在执行了所选择的行动后，达到新的状态 $s_{t+1}$ ，重复该过程。为了向代理人提供关于行动是否选择得当的反馈，他们会收到反馈信号，即每次决策后的奖励 $r_t$ 。
问题是要找到一个最佳决策，它将状态映射为行动，涉及到以时间 t 为开始状态的未来长期报酬：]]></description>
</item>
<item>
    <title>Access Path Selection in Main-Memory Optimized Data Systems</title>
    <link>https://imcaicai.github.io/access-path-selection-in-main-memory-optimized-data-systems/</link>
    <pubDate>Mon, 01 May 2023 23:35:11 &#43;0800</pubDate>
    <author>菜菜</author>
    <guid>https://imcaicai.github.io/access-path-selection-in-main-memory-optimized-data-systems/</guid>
    <description><![CDATA[本文为论文 Access Path Selection in Main-Memory Optimized Data Systems: Should I Scan or Should I Probe? 的阅读笔记。
1 引言 🟥 我们提出了一个增强的访问路径成本模型，它可以捕捉到在支持访问共享的主内存优化的分析数据系统中的选择运算符的性能。
🟨 访问路径的选择是需要的；即使在快速扫描时，经过调整的二级索引也是有用的。
🟩 我们表明，除了【选择性】和【硬件特性】外，访问路径的选择还需要动态地考虑到【查询并发性】。
🟦 我们将访问路径选择整合到一个现代分析原型的优化器中，并表明即使访问路径选择现在是一个更复杂的操作，必须考虑到更多的信息，它仍然可以快速完成；并且可以在各种工作负载上进行。
🟪 使用该模型，我们展示了何时使用索引的决定是如何随着数据布局和硬件属性的变化而变化的。
2 访问路径选择 2.1 模型准备工作  索引的选择性： 指不重复的索引值和数据表的记录总数的比值，取值范围在 [0,1] 之间。
索引的选择性越高则查询效率越高，因为选择性高的索引可以让 MySQL 在查找时过滤掉更多的行。
 2.2 内存中共享扫描建模 🔴 扫描的数据移动。给定内存带宽 $BW_S$ ，顺序扫描数据的成本为： $TD_S = \frac {N·ts}{BW_s}$ 。
🟡 谓词评估。假设 p 是时钟周期，fp 是指令流水线的常数，则谓词评估 PE 的 CPU 为： $PE = 2 · fp · p · N$ 。]]></description>
</item>
<item>
    <title>Slalom Coasting Through Raw Data via Adaptive Partitioning and Indexing</title>
    <link>https://imcaicai.github.io/slalom-coasting-through-raw-data-via-adaptive-partitioning-and-indexing/</link>
    <pubDate>Sat, 22 Apr 2023 13:08:20 &#43;0800</pubDate>
    <author>菜菜</author>
    <guid>https://imcaicai.github.io/slalom-coasting-through-raw-data-via-adaptive-partitioning-and-indexing/</guid>
    <description><![CDATA[本文为论文 Slalom: Coasting Through Raw Data via Adaptive Partitioning and Indexing 的阅读笔记。
 🟠 Slalom
 一个通过监视用户访问模式来适应工作负载变化的原位查询引擎。  🟡 关键组件
 在线分区和索引方案 为原位查询引擎量身定制的分区和索引调优器。  🟢 性能优势
 对原始数据文件进行逻辑分区；为每个分区构建轻量级分区特定的索引   1 简介 🟠 加载、索引和调优的成本
考虑到所涉及的数据大小，对数据的任何转换、复制和准备步骤都会在查询数据前引入大量延迟。缺乏对工作负载的先验知识使得物理设计决策几乎不可能。
🟡 自适应分区和细粒度索引
 使用第一次表扫描来生成分区和轻量级索引提示 数据集以动态方式部分索引，以适应三个关键工作负载特征：数据分布；查询类型；投影属性。 调优器通过以下方式降低数据访问成本:  对原始数据集进行逻辑分区，在不进行物理重构的情况下将其虚拟地分解为更易于管理的块 在每个逻辑分区上选择适当的索引策略，以提供有效的数据访问。（细粒度的索引决策）    🟢 基于Slalom的高效 In-Situ Query
 将在线分区和索引调谐器集成到原位查询处理原型系统Slalom中 Slalom在逻辑上将原始数据划分为分区，并根据每个分区的“热度”(访问频率)、针对每个分区的查询类型来选择构建哪个细粒度的分区索引。 Slalom填充二进制缓存(从原始数据转换为二进制数据的缓存)以进一步提高性能 Slalom使用基于随机成本的决策算法调整当前分区和索引方案来适应工作负载的变化  🔵 贡献
 我们提出了原始数据文件的逻辑分区方案，该方案支持在每个分区级别上进行细粒度的索引决策。 好处：带来了原位查询处理索引的好处；索引构建成本低；内存占用小。 我们将分区和索引调谐器集成到我们最先进的原型原位查询引擎Slalom中。  2 相关工作 🟣 对原始数据的查询
 Slalom使用的技术可以通过减少索引的大小、为每个文件分区构建内存效率高的索引来提高系统的可伸缩性。 Slalom不加载所有数据，而是利用工作负载局域性自适应地为原始数据创建细粒度索引方案，并逐渐减少I/O和访问成本，同时在适度的内存预算下运行。  🔵 数据库分区]]></description>
</item>
<item>
    <title>An Experimental Evaluation of Index Selection Algorithms</title>
    <link>https://imcaicai.github.io/an-experimental-evaluation-of-index-selection-algorithms/</link>
    <pubDate>Tue, 11 Apr 2023 18:15:39 &#43;0800</pubDate>
    <author>菜菜</author>
    <guid>https://imcaicai.github.io/an-experimental-evaluation-of-index-selection-algorithms/</guid>
    <description><![CDATA[本文为论文 Magic mirror in my hand, which is the best in the land?An Experimental Evaluation of Index Selection Algorithms 的阅读笔记。
1 引言 🟠 索引对于高效处理数据库工作负载来说很重要，针对索引选择提出的方案有很多，主要的难点是：
 解空间是巨大的：随索引数量、列、类型增加 索引间相互作用 很难在部署运行前量化索引对工作负载的影响  🟡 本文描述和分析了 8 种基于不同概念的索引选择算法，并沿着不同的维度进行比较，如解决方案质量、运行时长、多列支持、解决方案粒度和复杂性。
🟢 虚拟索引（hypothetical indexes）
为了避免执行查询、创建索引，一些数据库系统支持虚拟索引，通过它来估计成本。
2 索引选择算法 索引选择算法的里程碑时间轴如下：
2.1 Drop
这种方法依次删除候选索引，直到不能进一步降低成本为止。成本是由数据的特征决定的，而不是由查询优化器决定的。不支持多列索引的选择
2.2 AutoAdmin
该迭代算法通过在每次迭代中增加索引宽度来识别多列索引。首先从每个查询 $j=1,&hellip;Q$ 确定候选索引 $S_j$ ，再将所有查询的候选并集作为第二步的输入，确定最佳索引配置时考虑所有查询。
2.3 (Anytime) DTA
首先确定每个查询的候选索引，然后根据原始贪婪枚举确定整个工作负载的索引配置。
2.4 DB2Advis
① 确定候选索引：对每个查询 j ，在列上创建假设索引。然后，向优化器询问查询 j 的最佳计划，在结果计划中使用的假设索引被添加到索引候选集。
② I 中的所有候选索引都按照它们的逐空间效益比降序排序。下面，如果索引对w1的比值更高，则组合索引对w1和w2，直到达到存储预算。
③ 将先前计算的解决方案集与不属于的索引集交换，看成本是否降低。
2.5 Relaxation
① 为每个查询获取最佳索引配置。]]></description>
</item>
<item>
    <title>Label Embedding Online Hashing for Cross-Modal Retrieval</title>
    <link>https://imcaicai.github.io/lemon/</link>
    <pubDate>Fri, 18 Nov 2022 23:33:29 &#43;0800</pubDate>
    <author>菜菜</author>
    <guid>https://imcaicai.github.io/lemon/</guid>
    <description><![CDATA[本文为论文 Label Embedding Online Hashing for Cross-Modal 的阅读笔记。
论文下载：https://doi.org/10.1145/3394171.3413971
1 简介 学习散列，作为最著名的近似近邻搜索技术之一，近年来吸引了很多人的注意。它旨在将高维实值特征映射到紧凑的二进制编码，同时保留原始空间中的相似性。然后，可以用XOR操作在Hamming空间中进行搜索，效率高，存储成本低。
许多跨模态散列方法已经被提出并取得了很好的性能。但大多数现有的方法通过批处理学习二进制代码或哈希函数。即在学习过程前，所有的训练数据都可用。这将产生以下问题：
 实际数据通常以流方式收集，有新数据到来时，批处理方法需要对所有数据重新训练 → 效率低 训练集随训练时间变大 → 计算成本高  为了解决这些问题，在线散列被提出，但仍存在问题：
 大多数在线散列方法是为单模态检索设计的，很难直接扩展到跨模态检索。少数在线跨模态散列模型被提出，但性能较差，因为异质模态之间的关联性难以捕捉。 只根据新到达的数据更新散列函数，忽略了新旧数据间的相关性 → 丢失现有数据的信息 → 现有在线散列。 新数据到来时，哈希函数可以有效地重新训练，但哈希码必须对所有累积数据重构 → 更新方案低效。 离散优化大多采用松弛策略 → 量化误差大。  为了解决上述问题，这篇文章提出了一种新的监督下的跨模式检索的在线散列方法，即Label EMbedding ONline hashing，简称LEMON。本文的主要贡献总结如下：
  提出了一种新的有监督的在线散列检索方法，即LEMON。  它通过一个标签嵌入框架来捕捉语义结构，其中包括标签相似性的保存和标签重构，从而得到更有辨识度的二进制码。 通过优化内积最小化问题将新旧数据的哈希码连接起来，解决了更新不平衡问题。 采用两步学习策略，有效地更新哈希函数和二进制码，同时保持旧数据库的哈希代码不可更改，使其计算复杂度仅与流数据的大小有关。   提出了一种迭代优化算法来离散地解决二进制优化问题，极大地减少 量化误差。 在三个基准数据集上的实验结果表明，LEMON在跨模式检索任务上优于一些先进的离线和在线散列方法，并且可以扩展到大规模数据集。   2 相关工作 现有工作存在的问题：
 单模态：不能直接用于跨模态检索任务；必须在每一轮更新所有的二进制代码，效率非常低 多模态：不能跨模态检索 跨模态：不能充分利用原始特征、语义标签；不能很好地以流的方式来捕捉数据的相似性信息   单模态：查询和要检索的文档都只有一个模态（图像→图像）
多模态：查询和要检索的文档必须至少有一个模态相同（图像、文本→图像、文本）
跨模态：查询和要检索的文档模态不同（图像→文本）
 3 方法 3.1 Notations 假设每个样本由 $l$ 个模态组成。在第 $t$ 轮，一个新的数据块 $\vec{X}^{(t)}$ 被添加到数据库中。常用变量的说明如下：]]></description>
</item>
<item>
    <title>Vision GNN: An Image is Worth Graph of Nodes</title>
    <link>https://imcaicai.github.io/an-image-is-worth-graph-of-nodes/</link>
    <pubDate>Mon, 17 Oct 2022 00:00:00 &#43;0000</pubDate>
    <author>菜菜</author>
    <guid>https://imcaicai.github.io/an-image-is-worth-graph-of-nodes/</guid>
    <description><![CDATA[本文为论文 Vision GNN: An Image is Worth Graph of Nodes 的阅读笔记。
论文下载：https://arxiv.org/abs/2206.00272
引言 网络架构在基于深度学习的计算机视觉中起着关键作用。广泛使用的CNN和 transformer（变换器）将图像视为 grid（网格）或 sequence（序列）结构，这对于捕捉不规则、复杂的物体来说是不灵活的。本文建议将图像表示为一个 graph 结构，并引入一个新的 Vision GNN（ViG）架构来提取视觉任务的图层特征。
文章主要工作：
 介绍了计算机视觉方面的现有模型方法和成果 介绍ViG模型的构建过程及工作原理，为未来的研究提供有用的灵感和经验 通过图像分类和物体检测实验证明了ViG模型在视觉任务中的有效性  1 相关研究 CNN 曾经是计算机视觉中标准的网络结构，但近来 transformer with attention mechanism 、MLP-based 等模型也在不断发展，这些正在将视觉模型推向一个前所未有的高度。
1.1 3种图像结构 不同的网络结构以不同的方式处理输入的图像，通常有grid, sequence ,graph 3种，如下图所示。在 grid  和 sequence 结构中，节点只按空间位置排序；在 graph 结构中，节点是通过其内容连接的，不受局部位置的限制。
CNN 在图像上应用滑动窗口，并引入移位变异性和位置性；最近的 vision transformer 或 MLP 将图像视为 a sequence of patches（补丁序列）。
由于物体形状通常不是规则的四边形，常用的 grid 或 sequence 结构处理起图像来不够灵活，所以在本文中采用 graph 结构。
1.2 3种模型  CNN：曾经是计算机视觉中的主流网络结构，已经成功地应用于各种视觉任务，如图像分类、物体检测和语义分割。CNN模型在过去的十年里发展迅速，代表性的模型包括ResNet、MobileNet和NAS。 Vision transformer：从2020年开始，被引入到视觉任务中，ViT的一些变体开始被提出来以提高视觉任务的性能。主要的改进包括金字塔结，局部注意和位置编码。 MLP：通过专门设计的模块，MLP可以达到有竞争力的性能，并且在一般的视觉任务（如物体检测和分割）上工作。  1.]]></description>
</item>
</channel>
</rss>
