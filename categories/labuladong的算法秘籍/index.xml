<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>labuladong的算法秘籍 - Category - 菜菜的秘密花园</title>
        <link>https://imcaicai.github.io/categories/labuladong%E7%9A%84%E7%AE%97%E6%B3%95%E7%A7%98%E7%B1%8D/</link>
        <description>labuladong的算法秘籍 - Category - 菜菜的秘密花园</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 23 Dec 2022 22:20:00 &#43;0800</lastBuildDate><atom:link href="https://imcaicai.github.io/categories/labuladong%E7%9A%84%E7%AE%97%E6%B3%95%E7%A7%98%E7%B1%8D/" rel="self" type="application/rss+xml" /><item>
    <title>算法和刷题的框架思维</title>
    <link>https://imcaicai.github.io/%E7%AE%97%E6%B3%95%E5%92%8C%E5%88%B7%E9%A2%98%E7%9A%84%E6%A1%86%E6%9E%B6%E6%80%9D%E7%BB%B4/</link>
    <pubDate>Fri, 23 Dec 2022 22:20:00 &#43;0800</pubDate>
    <author>菜菜</author>
    <guid>https://imcaicai.github.io/%E7%AE%97%E6%B3%95%E5%92%8C%E5%88%B7%E9%A2%98%E7%9A%84%E6%A1%86%E6%9E%B6%E6%80%9D%E7%BB%B4/</guid>
    <description><![CDATA[1 数据结构的存储方式 1.1 数据结构&amp;存储方式 数据的存储方式只有两种：数组（顺序存储）和链表（链式存储）。
【队列】【栈】
【图】：链表实现就是邻接表，二维数组实现就是邻接矩阵
【散列表】
【树】：数组实现就是堆（完全二叉树），链表实现就是普通二叉树
1.2 数组&amp;链表优缺点 数组：
 紧凑连续存储,可以随机访问，通过索引快速找到对应元素，节约存储空间。 内存空间必须⼀次性分配够，扩容时需要重新分配空间，再把数据全部复制过去，时间复杂度 O(N) 插⼊和删除时间复杂度 O(N)  链表：
 元素不连续，不存在数组的扩容问题； 如果知道某⼀元素的前驱和后驱，插入删除时间复杂度 O(1) 存储空间不连续，不能随机访问 每个元素必须存储指向前后元素位置的指针，会消耗相对更多的储存空间。  2 数据结构的基本操作 数据结构的基本操作：遍历+访问（增删查改），分为线性/非线性。
线性即for/while迭代，非线性即递归。
 【数组遍历框架】 迭代  1 2 3 4 5  void traverse(int[] arr) { for (int i = 0; i &lt; arr.length; i++) { // 迭代访问 arr[i] 	} }    【链表遍历框架】 迭代/递归  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  /* 基本的单链表节点 */ class ListNode { int val; ListNode next; } void traverse(ListNode head) { for (ListNode p = head; p !]]></description>
</item>
</channel>
</rss>
